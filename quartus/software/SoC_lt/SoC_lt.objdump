
SoC_lt.elf:     file format elf32-littlenios2
SoC_lt.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001d5c memsz 0x00001d5c flags r-x
    LOAD off    0x00002d7c vaddr 0x00009d7c paddr 0x0000a098 align 2**12
         filesz 0x0000031c memsz 0x0000031c flags rw-
    LOAD off    0x000033b4 vaddr 0x0000a3b4 paddr 0x0000a3b4 align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001b18  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  00009d48  00009d48  00002d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000031c  00009d7c  0000a098  00002d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  0000a3b4  0000a3b4  000033b4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000a4e0  0000a4e0  00003098  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000538  00000000  00000000  000030c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005613  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020a8  00000000  00000000  00008c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002294  00000000  00000000  0000acb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a00  00000000  00000000  0000cf48  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001960  00000000  00000000  0000d948  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000974  00000000  00000000  0000f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000fc1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000190  00000000  00000000  0000fc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00011742  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00011745  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00011751  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00011752  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00011753  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001175e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00011769  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00011774  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  0001177a  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e39  00000000  00000000  0001179e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00055944  00000000  00000000  000165d7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
00009d48 l    d  .rodata	00000000 .rodata
00009d7c l    d  .rwdata	00000000 .rwdata
0000a3b4 l    d  .bss	00000000 .bss
0000a4e0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SoC_lt_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00008a98 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008c00 l     F .text	00000034 alt_dev_reg
00009da4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00008ee0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009014 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009040 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000929c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000093fc l     F .text	0000003c alt_get_errno
00009438 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
00009f78 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000a3d8 g     O .bss	00000004 alt_instruction_exception_handler
00008b84 g     F .text	0000007c alt_main
0000a3e0 g     O .bss	00000100 alt_irq
0000a098 g       *ABS*	00000000 __flash_rwdata_start
00008564 g     F .text	0000004c Timer_IRQ_Handler
00009704 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
0000a060 g     O .rwdata	00000004 h0_ptr
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a3dc g     O .bss	00000004 errno
0000a068 g     O .rwdata	00000004 h2_ptr
0000a3d0 g     O .bss	00000004 alt_argv
00012058 g       *ABS*	00000000 _gp
00009df8 g     O .rwdata	00000180 alt_fd_list
00009728 g     F .text	00000090 alt_find_dev
00009380 g     F .text	0000007c alt_io_redirect
00009d48 g       *ABS*	00000000 __DTOR_END__
00009200 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00008d60 g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000873c g     F .text	00000064 .hidden __udivsi3
0000a088 g     O .rwdata	00000004 alt_max_fd
00009d7c g     O .rwdata	00000028 hex_decode
0000a070 g     O .rwdata	00000004 key_ptr
0000a3b4 g     O .bss	00000004 point
0000a3c4 g     O .bss	00000004 second
0000a090 g     O .rwdata	00000004 _global_impure_ptr
0000a4e0 g       *ABS*	00000000 __bss_end
000089a8 g     F .text	000000f0 alt_iic_isr_register
0000895c g     F .text	0000004c alt_ic_irq_enabled
0000a3c8 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
00009dd0 g     O .rwdata	00000028 alt_dev_null
0000a3c0 g     O .bss	00000004 minute
00008ff4 g     F .text	00000020 alt_dcache_flush_all
0000a05c g     O .rwdata	00000004 slave_ptr
0000a098 g       *ABS*	00000000 __ram_rwdata_end
0000a080 g     O .rwdata	00000008 alt_dev_list
00009d7c g       *ABS*	00000000 __ram_rodata_end
000087a0 g     F .text	00000058 .hidden __umodsi3
000082a4 g     F .text	00000038 decade
0000a4e0 g       *ABS*	00000000 end
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00009d48 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00008e4c g     F .text	00000094 altera_avalon_jtag_uart_write
00009b5c g     F .text	00000190 __call_exitprocs
00008230 g     F .text	0000003c _start
00008c6c g     F .text	00000034 alt_sys_init
00009a04 g     F .text	00000158 __register_exitproc
0000a064 g     O .rwdata	00000004 h1_ptr
00009cec g     F .text	00000028 .hidden __mulsi3
00009d7c g       *ABS*	00000000 __ram_rwdata_start
00009d48 g       *ABS*	00000000 __ram_rodata_start
00008ca0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000098c0 g     F .text	000000c4 alt_get_fd
000099b8 g     F .text	00000030 memcmp
0000a4e0 g       *ABS*	00000000 __alt_stack_base
000097b8 g     F .text	00000108 alt_find_file
0000907c g     F .text	000000a4 alt_dev_llist_insert
000082dc g     F .text	000000ac point_handle
0000a3b4 g       *ABS*	00000000 __bss_start
000085b0 g     F .text	00000094 main
0000a3d4 g     O .bss	00000004 alt_envp
00008d00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a08c g     O .rwdata	00000004 alt_errno
00008644 g     F .text	00000084 .hidden __divsi3
00009d48 g       *ABS*	00000000 __CTOR_END__
00009d48 g       *ABS*	00000000 __flash_rodata_start
00009d48 g       *ABS*	00000000 __DTOR_LIST__
00008c34 g     F .text	00000038 alt_irq_init
00009680 g     F .text	00000084 alt_release_fd
00009984 g     F .text	00000014 atexit
0000a3b8 g     O .bss	00000004 point_1
0000a094 g     O .rwdata	00000004 _impure_ptr
0000a3cc g     O .bss	00000004 alt_argc
00009180 g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000a078 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
000087f8 g     F .text	00000050 alt_ic_isr_register
0000a3bc g     O .bss	00000004 point_2
0000a098 g       *ABS*	00000000 _edata
0000a4e0 g       *ABS*	00000000 _end
00008230 g       *ABS*	00000000 __ram_exceptions_end
000088d0 g     F .text	0000008c alt_ic_irq_disable
00009998 g     F .text	00000020 exit
000086c8 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000826c g     F .text	00000038 unit
00009d14 g     F .text	00000034 _exit
000099e8 g     F .text	0000001c strlen
0000a058 g     O .rwdata	00000004 sw_ptr
00009524 g     F .text	0000015c open
00008388 g     F .text	00000164 clock
000091e0 g     F .text	00000020 alt_icache_flush_all
0000a074 g     O .rwdata	00000004 alt_priority_mask
00008848 g     F .text	00000088 alt_ic_irq_enable
00009120 g     F .text	00000060 _do_ctors
0000a06c g     O .rwdata	00000004 status
00008f1c g     F .text	000000d8 close
000084ec g     F .text	00000078 timer_Init
00008b00 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10a8f804 	addi	r2,r2,-23584
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10a8f804 	addi	r2,r2,-23584
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff60d4>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff60c8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a0e017 	ldw	r2,-31872(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a0e017 	ldw	r2,-31872(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d6881614 	ori	gp,gp,8280
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10a8ed14 	ori	r2,r2,41908

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18e93814 	ori	r3,r3,42208

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff61fc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	0008b000 	call	8b00 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	0008b840 	call	8b84 <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff6210>

0000826c <unit>:
unsigned int minute = 0;
unsigned int second = 0;
//KEY
volatile int* key_ptr = (int*) KEY_BASE;

unsigned int unit(unsigned int number){
    826c:	defffd04 	addi	sp,sp,-12
    8270:	dfc00215 	stw	ra,8(sp)
    8274:	df000115 	stw	fp,4(sp)
    8278:	df000104 	addi	fp,sp,4
    827c:	e13fff15 	stw	r4,-4(fp)
	return number%10;
    8280:	e0bfff17 	ldw	r2,-4(fp)
    8284:	01400284 	movi	r5,10
    8288:	1009883a 	mov	r4,r2
    828c:	00087a00 	call	87a0 <__umodsi3>
}
    8290:	e037883a 	mov	sp,fp
    8294:	dfc00117 	ldw	ra,4(sp)
    8298:	df000017 	ldw	fp,0(sp)
    829c:	dec00204 	addi	sp,sp,8
    82a0:	f800283a 	ret

000082a4 <decade>:

unsigned int decade(unsigned int number){
    82a4:	defffd04 	addi	sp,sp,-12
    82a8:	dfc00215 	stw	ra,8(sp)
    82ac:	df000115 	stw	fp,4(sp)
    82b0:	df000104 	addi	fp,sp,4
    82b4:	e13fff15 	stw	r4,-4(fp)
	return number/10;
    82b8:	e0bfff17 	ldw	r2,-4(fp)
    82bc:	01400284 	movi	r5,10
    82c0:	1009883a 	mov	r4,r2
    82c4:	000873c0 	call	873c <__udivsi3>
}
    82c8:	e037883a 	mov	sp,fp
    82cc:	dfc00117 	ldw	ra,4(sp)
    82d0:	df000017 	ldw	fp,0(sp)
    82d4:	dec00204 	addi	sp,sp,8
    82d8:	f800283a 	ret

000082dc <point_handle>:


void point_handle(){
    82dc:	defffe04 	addi	sp,sp,-8
    82e0:	df000115 	stw	fp,4(sp)
    82e4:	df000104 	addi	fp,sp,4
	int y;
	point = *(sw_ptr);
    82e8:	d0a00017 	ldw	r2,-32768(gp)
    82ec:	10800017 	ldw	r2,0(r2)
    82f0:	d0a0d715 	stw	r2,-31908(gp)
	point_1 = point & 0xf;
    82f4:	d0a0d717 	ldw	r2,-31908(gp)
    82f8:	108003cc 	andi	r2,r2,15
    82fc:	d0a0d815 	stw	r2,-31904(gp)
	point_2 = (point & 0xf0) >> 0x4;
    8300:	d0a0d717 	ldw	r2,-31908(gp)
    8304:	10803c0c 	andi	r2,r2,240
    8308:	1004d13a 	srli	r2,r2,4
    830c:	d0a0d915 	stw	r2,-31900(gp)

	*(slave_ptr + 2) = hex_decode[point_2] << 7 | hex_decode[point_1];
    8310:	d0a00117 	ldw	r2,-32764(gp)
    8314:	11000204 	addi	r4,r2,8
    8318:	d0e0d917 	ldw	r3,-31900(gp)
    831c:	00800074 	movhi	r2,1
    8320:	10a75f04 	addi	r2,r2,-25220
    8324:	18c7883a 	add	r3,r3,r3
    8328:	18c7883a 	add	r3,r3,r3
    832c:	10c5883a 	add	r2,r2,r3
    8330:	10800017 	ldw	r2,0(r2)
    8334:	100a91fa 	slli	r5,r2,7
    8338:	d0e0d817 	ldw	r3,-31904(gp)
    833c:	00800074 	movhi	r2,1
    8340:	10a75f04 	addi	r2,r2,-25220
    8344:	18c7883a 	add	r3,r3,r3
    8348:	18c7883a 	add	r3,r3,r3
    834c:	10c5883a 	add	r2,r2,r3
    8350:	10800017 	ldw	r2,0(r2)
    8354:	2884b03a 	or	r2,r5,r2
    8358:	20800015 	stw	r2,0(r4)
	y = *(slave_ptr + 2);
    835c:	d0a00117 	ldw	r2,-32764(gp)
    8360:	10800217 	ldw	r2,8(r2)
    8364:	e0bfff15 	stw	r2,-4(fp)
	*(h2_ptr) = y;
    8368:	d0a00417 	ldw	r2,-32752(gp)
    836c:	e0ffff17 	ldw	r3,-4(fp)
    8370:	10c00015 	stw	r3,0(r2)
}
    8374:	0001883a 	nop
    8378:	e037883a 	mov	sp,fp
    837c:	df000017 	ldw	fp,0(sp)
    8380:	dec00104 	addi	sp,sp,4
    8384:	f800283a 	ret

00008388 <clock>:



void clock(){
    8388:	defffa04 	addi	sp,sp,-24
    838c:	dfc00515 	stw	ra,20(sp)
    8390:	df000415 	stw	fp,16(sp)
    8394:	dc400315 	stw	r17,12(sp)
    8398:	dc000215 	stw	r16,8(sp)
    839c:	df000404 	addi	fp,sp,16
	int second_h, minute_h;
	if(second == 60){
    83a0:	d0a0db17 	ldw	r2,-31892(gp)
    83a4:	10800f18 	cmpnei	r2,r2,60
    83a8:	1000041e 	bne	r2,zero,83bc <clock+0x34>
		second = 0;
    83ac:	d020db15 	stw	zero,-31892(gp)
		minute++;
    83b0:	d0a0da17 	ldw	r2,-31896(gp)
    83b4:	10800044 	addi	r2,r2,1
    83b8:	d0a0da15 	stw	r2,-31896(gp)
	}
	if(minute == 90){
    83bc:	d0a0da17 	ldw	r2,-31896(gp)
    83c0:	10801698 	cmpnei	r2,r2,90
    83c4:	1000041e 	bne	r2,zero,83d8 <clock+0x50>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    83c8:	00c002c4 	movi	r3,11
    83cc:	00800074 	movhi	r2,1
    83d0:	10840104 	addi	r2,r2,4100
    83d4:	10c00035 	stwio	r3,0(r2)
			ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | // Continue counting mode
			ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | // Interrupt enable
			ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
	}
	*(slave_ptr + 0) = hex_decode[decade(second)] << 7 | hex_decode[unit(second)];
    83d8:	d4200117 	ldw	r16,-32764(gp)
    83dc:	d0a0db17 	ldw	r2,-31892(gp)
    83e0:	1009883a 	mov	r4,r2
    83e4:	00082a40 	call	82a4 <decade>
    83e8:	1007883a 	mov	r3,r2
    83ec:	00800074 	movhi	r2,1
    83f0:	10a75f04 	addi	r2,r2,-25220
    83f4:	18c7883a 	add	r3,r3,r3
    83f8:	18c7883a 	add	r3,r3,r3
    83fc:	10c5883a 	add	r2,r2,r3
    8400:	10800017 	ldw	r2,0(r2)
    8404:	102291fa 	slli	r17,r2,7
    8408:	d0a0db17 	ldw	r2,-31892(gp)
    840c:	1009883a 	mov	r4,r2
    8410:	000826c0 	call	826c <unit>
    8414:	1007883a 	mov	r3,r2
    8418:	00800074 	movhi	r2,1
    841c:	10a75f04 	addi	r2,r2,-25220
    8420:	18c7883a 	add	r3,r3,r3
    8424:	18c7883a 	add	r3,r3,r3
    8428:	10c5883a 	add	r2,r2,r3
    842c:	10800017 	ldw	r2,0(r2)
    8430:	8884b03a 	or	r2,r17,r2
    8434:	80800015 	stw	r2,0(r16)
	*(slave_ptr + 1) = hex_decode[decade(minute)] << 7 | hex_decode[unit(minute)];
    8438:	d0a00117 	ldw	r2,-32764(gp)
    843c:	14000104 	addi	r16,r2,4
    8440:	d0a0da17 	ldw	r2,-31896(gp)
    8444:	1009883a 	mov	r4,r2
    8448:	00082a40 	call	82a4 <decade>
    844c:	1007883a 	mov	r3,r2
    8450:	00800074 	movhi	r2,1
    8454:	10a75f04 	addi	r2,r2,-25220
    8458:	18c7883a 	add	r3,r3,r3
    845c:	18c7883a 	add	r3,r3,r3
    8460:	10c5883a 	add	r2,r2,r3
    8464:	10800017 	ldw	r2,0(r2)
    8468:	102291fa 	slli	r17,r2,7
    846c:	d0a0da17 	ldw	r2,-31896(gp)
    8470:	1009883a 	mov	r4,r2
    8474:	000826c0 	call	826c <unit>
    8478:	1007883a 	mov	r3,r2
    847c:	00800074 	movhi	r2,1
    8480:	10a75f04 	addi	r2,r2,-25220
    8484:	18c7883a 	add	r3,r3,r3
    8488:	18c7883a 	add	r3,r3,r3
    848c:	10c5883a 	add	r2,r2,r3
    8490:	10800017 	ldw	r2,0(r2)
    8494:	8884b03a 	or	r2,r17,r2
    8498:	80800015 	stw	r2,0(r16)
	second_h = *(slave_ptr + 0);
    849c:	d0a00117 	ldw	r2,-32764(gp)
    84a0:	10800017 	ldw	r2,0(r2)
    84a4:	e0bffc15 	stw	r2,-16(fp)
	minute_h = *(slave_ptr + 1);
    84a8:	d0a00117 	ldw	r2,-32764(gp)
    84ac:	10800117 	ldw	r2,4(r2)
    84b0:	e0bffd15 	stw	r2,-12(fp)
	*(h0_ptr) = second_h;
    84b4:	d0a00217 	ldw	r2,-32760(gp)
    84b8:	e0fffc17 	ldw	r3,-16(fp)
    84bc:	10c00015 	stw	r3,0(r2)
	*(h1_ptr) = minute_h;
    84c0:	d0a00317 	ldw	r2,-32756(gp)
    84c4:	e0fffd17 	ldw	r3,-12(fp)
    84c8:	10c00015 	stw	r3,0(r2)
}
    84cc:	0001883a 	nop
    84d0:	e6fffe04 	addi	sp,fp,-8
    84d4:	dfc00317 	ldw	ra,12(sp)
    84d8:	df000217 	ldw	fp,8(sp)
    84dc:	dc400117 	ldw	r17,4(sp)
    84e0:	dc000017 	ldw	r16,0(sp)
    84e4:	dec00404 	addi	sp,sp,16
    84e8:	f800283a 	ret

000084ec <timer_Init>:

void timer_Init(){
    84ec:	defffe04 	addi	sp,sp,-8
    84f0:	df000115 	stw	fp,4(sp)
    84f4:	df000104 	addi	fp,sp,4
	unsigned int period = 0;
    84f8:	e03fff15 	stw	zero,-4(fp)
	// Stop Timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    84fc:	00c00204 	movi	r3,8
    8500:	00800074 	movhi	r2,1
    8504:	10840104 	addi	r2,r2,4100
    8508:	10c00035 	stwio	r3,0(r2)
	//Configure period
	period = 50000000 - 1;
    850c:	0080bef4 	movhi	r2,763
    8510:	10bc1fc4 	addi	r2,r2,-3969
    8514:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, period);
    8518:	e0ffff17 	ldw	r3,-4(fp)
    851c:	00800074 	movhi	r2,1
    8520:	10840204 	addi	r2,r2,4104
    8524:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (period >> 16));
    8528:	e0bfff17 	ldw	r2,-4(fp)
    852c:	1004d43a 	srli	r2,r2,16
    8530:	1007883a 	mov	r3,r2
    8534:	00800074 	movhi	r2,1
    8538:	10840304 	addi	r2,r2,4108
    853c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    8540:	00c001c4 	movi	r3,7
    8544:	00800074 	movhi	r2,1
    8548:	10840104 	addi	r2,r2,4100
    854c:	10c00035 	stwio	r3,0(r2)
	ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | // Continue counting mode
	ALTERA_AVALON_TIMER_CONTROL_ITO_MSK |// Interrupt enable
	ALTERA_AVALON_TIMER_CONTROL_START_MSK);// Start Timer
}
    8550:	0001883a 	nop
    8554:	e037883a 	mov	sp,fp
    8558:	df000017 	ldw	fp,0(sp)
    855c:	dec00104 	addi	sp,sp,4
    8560:	f800283a 	ret

00008564 <Timer_IRQ_Handler>:
void Timer_IRQ_Handler(void* isr_context){
    8564:	defffd04 	addi	sp,sp,-12
    8568:	dfc00215 	stw	ra,8(sp)
    856c:	df000115 	stw	fp,4(sp)
    8570:	df000104 	addi	fp,sp,4
    8574:	e13fff15 	stw	r4,-4(fp)
	//handle point
	point_handle();
    8578:	00082dc0 	call	82dc <point_handle>
	second++;
    857c:	d0a0db17 	ldw	r2,-31892(gp)
    8580:	10800044 	addi	r2,r2,1
    8584:	d0a0db15 	stw	r2,-31892(gp)
	// Clear Timer interrupt bit
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_TO_MSK);
    8588:	00c00044 	movi	r3,1
    858c:	00800074 	movhi	r2,1
    8590:	10840004 	addi	r2,r2,4096
    8594:	10c00035 	stwio	r3,0(r2)
}
    8598:	0001883a 	nop
    859c:	e037883a 	mov	sp,fp
    85a0:	dfc00117 	ldw	ra,4(sp)
    85a4:	df000017 	ldw	fp,0(sp)
    85a8:	dec00204 	addi	sp,sp,8
    85ac:	f800283a 	ret

000085b0 <main>:
int main(){
    85b0:	defffd04 	addi	sp,sp,-12
    85b4:	dfc00215 	stw	ra,8(sp)
    85b8:	df000115 	stw	fp,4(sp)
    85bc:	df000104 	addi	fp,sp,4
	timer_Init();
    85c0:	00084ec0 	call	84ec <timer_Init>
	alt_ic_isr_register(0, TIMER_0_IRQ, Timer_IRQ_Handler, (void*)0,(void*)0);
    85c4:	d8000015 	stw	zero,0(sp)
    85c8:	000f883a 	mov	r7,zero
    85cc:	01800074 	movhi	r6,1
    85d0:	31a15904 	addi	r6,r6,-31388
    85d4:	01400044 	movi	r5,1
    85d8:	0009883a 	mov	r4,zero
    85dc:	00087f80 	call	87f8 <alt_ic_isr_register>
	while(1){
		if(*(key_ptr) == 0){
    85e0:	d0a00617 	ldw	r2,-32744(gp)
    85e4:	10800017 	ldw	r2,0(r2)
    85e8:	1000141e 	bne	r2,zero,863c <main+0x8c>
			while(*(key_ptr) == 0);
    85ec:	0001883a 	nop
    85f0:	d0a00617 	ldw	r2,-32744(gp)
    85f4:	10800017 	ldw	r2,0(r2)
    85f8:	103ffd26 	beq	r2,zero,85f0 <_gp+0xffff6598>
			status = ~status & 1;
    85fc:	d0a00517 	ldw	r2,-32748(gp)
    8600:	1080004c 	andi	r2,r2,1
    8604:	1005003a 	cmpeq	r2,r2,zero
    8608:	10803fcc 	andi	r2,r2,255
    860c:	d0a00515 	stw	r2,-32748(gp)
			if(status == 0){
    8610:	d0a00517 	ldw	r2,-32748(gp)
    8614:	1000051e 	bne	r2,zero,862c <main+0x7c>
				IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    8618:	00c002c4 	movi	r3,11
    861c:	00800074 	movhi	r2,1
    8620:	10840104 	addi	r2,r2,4100
    8624:	10c00035 	stwio	r3,0(r2)
    8628:	00000406 	br	863c <main+0x8c>
					ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | // Interrupt enable
					ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
			}
			else
			{
				IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    862c:	00c001c4 	movi	r3,7
    8630:	00800074 	movhi	r2,1
    8634:	10840104 	addi	r2,r2,4100
    8638:	10c00035 	stwio	r3,0(r2)
					ALTERA_AVALON_TIMER_CONTROL_ITO_MSK | // Interrupt enable
					ALTERA_AVALON_TIMER_CONTROL_START_MSK);
			}
		}

		clock();
    863c:	00083880 	call	8388 <clock>
	};
    8640:	003fe706 	br	85e0 <_gp+0xffff6588>

00008644 <__divsi3>:
    8644:	20001b16 	blt	r4,zero,86b4 <__divsi3+0x70>
    8648:	000f883a 	mov	r7,zero
    864c:	28001616 	blt	r5,zero,86a8 <__divsi3+0x64>
    8650:	200d883a 	mov	r6,r4
    8654:	29001a2e 	bgeu	r5,r4,86c0 <__divsi3+0x7c>
    8658:	00800804 	movi	r2,32
    865c:	00c00044 	movi	r3,1
    8660:	00000106 	br	8668 <__divsi3+0x24>
    8664:	10000d26 	beq	r2,zero,869c <__divsi3+0x58>
    8668:	294b883a 	add	r5,r5,r5
    866c:	10bfffc4 	addi	r2,r2,-1
    8670:	18c7883a 	add	r3,r3,r3
    8674:	293ffb36 	bltu	r5,r4,8664 <_gp+0xffff660c>
    8678:	0005883a 	mov	r2,zero
    867c:	18000726 	beq	r3,zero,869c <__divsi3+0x58>
    8680:	0005883a 	mov	r2,zero
    8684:	31400236 	bltu	r6,r5,8690 <__divsi3+0x4c>
    8688:	314dc83a 	sub	r6,r6,r5
    868c:	10c4b03a 	or	r2,r2,r3
    8690:	1806d07a 	srli	r3,r3,1
    8694:	280ad07a 	srli	r5,r5,1
    8698:	183ffa1e 	bne	r3,zero,8684 <_gp+0xffff662c>
    869c:	38000126 	beq	r7,zero,86a4 <__divsi3+0x60>
    86a0:	0085c83a 	sub	r2,zero,r2
    86a4:	f800283a 	ret
    86a8:	014bc83a 	sub	r5,zero,r5
    86ac:	39c0005c 	xori	r7,r7,1
    86b0:	003fe706 	br	8650 <_gp+0xffff65f8>
    86b4:	0109c83a 	sub	r4,zero,r4
    86b8:	01c00044 	movi	r7,1
    86bc:	003fe306 	br	864c <_gp+0xffff65f4>
    86c0:	00c00044 	movi	r3,1
    86c4:	003fee06 	br	8680 <_gp+0xffff6628>

000086c8 <__modsi3>:
    86c8:	20001716 	blt	r4,zero,8728 <__modsi3+0x60>
    86cc:	000f883a 	mov	r7,zero
    86d0:	2005883a 	mov	r2,r4
    86d4:	28001216 	blt	r5,zero,8720 <__modsi3+0x58>
    86d8:	2900162e 	bgeu	r5,r4,8734 <__modsi3+0x6c>
    86dc:	01800804 	movi	r6,32
    86e0:	00c00044 	movi	r3,1
    86e4:	00000106 	br	86ec <__modsi3+0x24>
    86e8:	30000a26 	beq	r6,zero,8714 <__modsi3+0x4c>
    86ec:	294b883a 	add	r5,r5,r5
    86f0:	31bfffc4 	addi	r6,r6,-1
    86f4:	18c7883a 	add	r3,r3,r3
    86f8:	293ffb36 	bltu	r5,r4,86e8 <_gp+0xffff6690>
    86fc:	18000526 	beq	r3,zero,8714 <__modsi3+0x4c>
    8700:	1806d07a 	srli	r3,r3,1
    8704:	11400136 	bltu	r2,r5,870c <__modsi3+0x44>
    8708:	1145c83a 	sub	r2,r2,r5
    870c:	280ad07a 	srli	r5,r5,1
    8710:	183ffb1e 	bne	r3,zero,8700 <_gp+0xffff66a8>
    8714:	38000126 	beq	r7,zero,871c <__modsi3+0x54>
    8718:	0085c83a 	sub	r2,zero,r2
    871c:	f800283a 	ret
    8720:	014bc83a 	sub	r5,zero,r5
    8724:	003fec06 	br	86d8 <_gp+0xffff6680>
    8728:	0109c83a 	sub	r4,zero,r4
    872c:	01c00044 	movi	r7,1
    8730:	003fe706 	br	86d0 <_gp+0xffff6678>
    8734:	00c00044 	movi	r3,1
    8738:	003ff106 	br	8700 <_gp+0xffff66a8>

0000873c <__udivsi3>:
    873c:	200d883a 	mov	r6,r4
    8740:	2900152e 	bgeu	r5,r4,8798 <__udivsi3+0x5c>
    8744:	28001416 	blt	r5,zero,8798 <__udivsi3+0x5c>
    8748:	00800804 	movi	r2,32
    874c:	00c00044 	movi	r3,1
    8750:	00000206 	br	875c <__udivsi3+0x20>
    8754:	10000e26 	beq	r2,zero,8790 <__udivsi3+0x54>
    8758:	28000516 	blt	r5,zero,8770 <__udivsi3+0x34>
    875c:	294b883a 	add	r5,r5,r5
    8760:	10bfffc4 	addi	r2,r2,-1
    8764:	18c7883a 	add	r3,r3,r3
    8768:	293ffa36 	bltu	r5,r4,8754 <_gp+0xffff66fc>
    876c:	18000826 	beq	r3,zero,8790 <__udivsi3+0x54>
    8770:	0005883a 	mov	r2,zero
    8774:	31400236 	bltu	r6,r5,8780 <__udivsi3+0x44>
    8778:	314dc83a 	sub	r6,r6,r5
    877c:	10c4b03a 	or	r2,r2,r3
    8780:	1806d07a 	srli	r3,r3,1
    8784:	280ad07a 	srli	r5,r5,1
    8788:	183ffa1e 	bne	r3,zero,8774 <_gp+0xffff671c>
    878c:	f800283a 	ret
    8790:	0005883a 	mov	r2,zero
    8794:	f800283a 	ret
    8798:	00c00044 	movi	r3,1
    879c:	003ff406 	br	8770 <_gp+0xffff6718>

000087a0 <__umodsi3>:
    87a0:	2005883a 	mov	r2,r4
    87a4:	2900122e 	bgeu	r5,r4,87f0 <__umodsi3+0x50>
    87a8:	28001116 	blt	r5,zero,87f0 <__umodsi3+0x50>
    87ac:	01800804 	movi	r6,32
    87b0:	00c00044 	movi	r3,1
    87b4:	00000206 	br	87c0 <__umodsi3+0x20>
    87b8:	30000c26 	beq	r6,zero,87ec <__umodsi3+0x4c>
    87bc:	28000516 	blt	r5,zero,87d4 <__umodsi3+0x34>
    87c0:	294b883a 	add	r5,r5,r5
    87c4:	31bfffc4 	addi	r6,r6,-1
    87c8:	18c7883a 	add	r3,r3,r3
    87cc:	293ffa36 	bltu	r5,r4,87b8 <_gp+0xffff6760>
    87d0:	18000626 	beq	r3,zero,87ec <__umodsi3+0x4c>
    87d4:	1806d07a 	srli	r3,r3,1
    87d8:	11400136 	bltu	r2,r5,87e0 <__umodsi3+0x40>
    87dc:	1145c83a 	sub	r2,r2,r5
    87e0:	280ad07a 	srli	r5,r5,1
    87e4:	183ffb1e 	bne	r3,zero,87d4 <_gp+0xffff677c>
    87e8:	f800283a 	ret
    87ec:	f800283a 	ret
    87f0:	00c00044 	movi	r3,1
    87f4:	003ff706 	br	87d4 <_gp+0xffff677c>

000087f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    87f8:	defff904 	addi	sp,sp,-28
    87fc:	dfc00615 	stw	ra,24(sp)
    8800:	df000515 	stw	fp,20(sp)
    8804:	df000504 	addi	fp,sp,20
    8808:	e13ffc15 	stw	r4,-16(fp)
    880c:	e17ffd15 	stw	r5,-12(fp)
    8810:	e1bffe15 	stw	r6,-8(fp)
    8814:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    8818:	e0800217 	ldw	r2,8(fp)
    881c:	d8800015 	stw	r2,0(sp)
    8820:	e1ffff17 	ldw	r7,-4(fp)
    8824:	e1bffe17 	ldw	r6,-8(fp)
    8828:	e17ffd17 	ldw	r5,-12(fp)
    882c:	e13ffc17 	ldw	r4,-16(fp)
    8830:	00089a80 	call	89a8 <alt_iic_isr_register>
}  
    8834:	e037883a 	mov	sp,fp
    8838:	dfc00117 	ldw	ra,4(sp)
    883c:	df000017 	ldw	fp,0(sp)
    8840:	dec00204 	addi	sp,sp,8
    8844:	f800283a 	ret

00008848 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    8848:	defff904 	addi	sp,sp,-28
    884c:	df000615 	stw	fp,24(sp)
    8850:	df000604 	addi	fp,sp,24
    8854:	e13ffe15 	stw	r4,-8(fp)
    8858:	e17fff15 	stw	r5,-4(fp)
    885c:	e0bfff17 	ldw	r2,-4(fp)
    8860:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8864:	0005303a 	rdctl	r2,status
    8868:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    886c:	e0fffb17 	ldw	r3,-20(fp)
    8870:	00bfff84 	movi	r2,-2
    8874:	1884703a 	and	r2,r3,r2
    8878:	1001703a 	wrctl	status,r2
  
  return context;
    887c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8880:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    8884:	00c00044 	movi	r3,1
    8888:	e0bffa17 	ldw	r2,-24(fp)
    888c:	1884983a 	sll	r2,r3,r2
    8890:	1007883a 	mov	r3,r2
    8894:	d0a0dc17 	ldw	r2,-31888(gp)
    8898:	1884b03a 	or	r2,r3,r2
    889c:	d0a0dc15 	stw	r2,-31888(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    88a0:	d0a0dc17 	ldw	r2,-31888(gp)
    88a4:	100170fa 	wrctl	ienable,r2
    88a8:	e0bffc17 	ldw	r2,-16(fp)
    88ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    88b0:	e0bffd17 	ldw	r2,-12(fp)
    88b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    88b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    88bc:	0001883a 	nop
}
    88c0:	e037883a 	mov	sp,fp
    88c4:	df000017 	ldw	fp,0(sp)
    88c8:	dec00104 	addi	sp,sp,4
    88cc:	f800283a 	ret

000088d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    88d0:	defff904 	addi	sp,sp,-28
    88d4:	df000615 	stw	fp,24(sp)
    88d8:	df000604 	addi	fp,sp,24
    88dc:	e13ffe15 	stw	r4,-8(fp)
    88e0:	e17fff15 	stw	r5,-4(fp)
    88e4:	e0bfff17 	ldw	r2,-4(fp)
    88e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    88ec:	0005303a 	rdctl	r2,status
    88f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    88f4:	e0fffb17 	ldw	r3,-20(fp)
    88f8:	00bfff84 	movi	r2,-2
    88fc:	1884703a 	and	r2,r3,r2
    8900:	1001703a 	wrctl	status,r2
  
  return context;
    8904:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8908:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    890c:	00c00044 	movi	r3,1
    8910:	e0bffa17 	ldw	r2,-24(fp)
    8914:	1884983a 	sll	r2,r3,r2
    8918:	0084303a 	nor	r2,zero,r2
    891c:	1007883a 	mov	r3,r2
    8920:	d0a0dc17 	ldw	r2,-31888(gp)
    8924:	1884703a 	and	r2,r3,r2
    8928:	d0a0dc15 	stw	r2,-31888(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    892c:	d0a0dc17 	ldw	r2,-31888(gp)
    8930:	100170fa 	wrctl	ienable,r2
    8934:	e0bffc17 	ldw	r2,-16(fp)
    8938:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    893c:	e0bffd17 	ldw	r2,-12(fp)
    8940:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    8944:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    8948:	0001883a 	nop
}
    894c:	e037883a 	mov	sp,fp
    8950:	df000017 	ldw	fp,0(sp)
    8954:	dec00104 	addi	sp,sp,4
    8958:	f800283a 	ret

0000895c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    895c:	defffc04 	addi	sp,sp,-16
    8960:	df000315 	stw	fp,12(sp)
    8964:	df000304 	addi	fp,sp,12
    8968:	e13ffe15 	stw	r4,-8(fp)
    896c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8970:	000530fa 	rdctl	r2,ienable
    8974:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    8978:	00c00044 	movi	r3,1
    897c:	e0bfff17 	ldw	r2,-4(fp)
    8980:	1884983a 	sll	r2,r3,r2
    8984:	1007883a 	mov	r3,r2
    8988:	e0bffd17 	ldw	r2,-12(fp)
    898c:	1884703a 	and	r2,r3,r2
    8990:	1004c03a 	cmpne	r2,r2,zero
    8994:	10803fcc 	andi	r2,r2,255
}
    8998:	e037883a 	mov	sp,fp
    899c:	df000017 	ldw	fp,0(sp)
    89a0:	dec00104 	addi	sp,sp,4
    89a4:	f800283a 	ret

000089a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    89a8:	defff504 	addi	sp,sp,-44
    89ac:	dfc00a15 	stw	ra,40(sp)
    89b0:	df000915 	stw	fp,36(sp)
    89b4:	df000904 	addi	fp,sp,36
    89b8:	e13ffc15 	stw	r4,-16(fp)
    89bc:	e17ffd15 	stw	r5,-12(fp)
    89c0:	e1bffe15 	stw	r6,-8(fp)
    89c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    89c8:	00bffa84 	movi	r2,-22
    89cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    89d0:	e0bffd17 	ldw	r2,-12(fp)
    89d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    89d8:	e0bff817 	ldw	r2,-32(fp)
    89dc:	10800808 	cmpgei	r2,r2,32
    89e0:	1000271e 	bne	r2,zero,8a80 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    89e4:	0005303a 	rdctl	r2,status
    89e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    89ec:	e0fffb17 	ldw	r3,-20(fp)
    89f0:	00bfff84 	movi	r2,-2
    89f4:	1884703a 	and	r2,r3,r2
    89f8:	1001703a 	wrctl	status,r2
  
  return context;
    89fc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    8a00:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    8a04:	00800074 	movhi	r2,1
    8a08:	10a8f804 	addi	r2,r2,-23584
    8a0c:	e0fff817 	ldw	r3,-32(fp)
    8a10:	180690fa 	slli	r3,r3,3
    8a14:	10c5883a 	add	r2,r2,r3
    8a18:	e0fffe17 	ldw	r3,-8(fp)
    8a1c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    8a20:	00800074 	movhi	r2,1
    8a24:	10a8f804 	addi	r2,r2,-23584
    8a28:	e0fff817 	ldw	r3,-32(fp)
    8a2c:	180690fa 	slli	r3,r3,3
    8a30:	10c5883a 	add	r2,r2,r3
    8a34:	10800104 	addi	r2,r2,4
    8a38:	e0ffff17 	ldw	r3,-4(fp)
    8a3c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    8a40:	e0bffe17 	ldw	r2,-8(fp)
    8a44:	10000526 	beq	r2,zero,8a5c <alt_iic_isr_register+0xb4>
    8a48:	e0bff817 	ldw	r2,-32(fp)
    8a4c:	100b883a 	mov	r5,r2
    8a50:	e13ffc17 	ldw	r4,-16(fp)
    8a54:	00088480 	call	8848 <alt_ic_irq_enable>
    8a58:	00000406 	br	8a6c <alt_iic_isr_register+0xc4>
    8a5c:	e0bff817 	ldw	r2,-32(fp)
    8a60:	100b883a 	mov	r5,r2
    8a64:	e13ffc17 	ldw	r4,-16(fp)
    8a68:	00088d00 	call	88d0 <alt_ic_irq_disable>
    8a6c:	e0bff715 	stw	r2,-36(fp)
    8a70:	e0bffa17 	ldw	r2,-24(fp)
    8a74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8a78:	e0bff917 	ldw	r2,-28(fp)
    8a7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    8a80:	e0bff717 	ldw	r2,-36(fp)
}
    8a84:	e037883a 	mov	sp,fp
    8a88:	dfc00117 	ldw	ra,4(sp)
    8a8c:	df000017 	ldw	fp,0(sp)
    8a90:	dec00204 	addi	sp,sp,8
    8a94:	f800283a 	ret

00008a98 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8a98:	defffc04 	addi	sp,sp,-16
    8a9c:	df000315 	stw	fp,12(sp)
    8aa0:	df000304 	addi	fp,sp,12
    8aa4:	e13ffd15 	stw	r4,-12(fp)
    8aa8:	e17ffe15 	stw	r5,-8(fp)
    8aac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8ab0:	e0fffe17 	ldw	r3,-8(fp)
    8ab4:	e0bffd17 	ldw	r2,-12(fp)
    8ab8:	18800c26 	beq	r3,r2,8aec <alt_load_section+0x54>
  {
    while( to != end )
    8abc:	00000806 	br	8ae0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8ac0:	e0bffe17 	ldw	r2,-8(fp)
    8ac4:	10c00104 	addi	r3,r2,4
    8ac8:	e0fffe15 	stw	r3,-8(fp)
    8acc:	e0fffd17 	ldw	r3,-12(fp)
    8ad0:	19000104 	addi	r4,r3,4
    8ad4:	e13ffd15 	stw	r4,-12(fp)
    8ad8:	18c00017 	ldw	r3,0(r3)
    8adc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8ae0:	e0fffe17 	ldw	r3,-8(fp)
    8ae4:	e0bfff17 	ldw	r2,-4(fp)
    8ae8:	18bff51e 	bne	r3,r2,8ac0 <_gp+0xffff6a68>
    {
      *to++ = *from++;
    }
  }
}
    8aec:	0001883a 	nop
    8af0:	e037883a 	mov	sp,fp
    8af4:	df000017 	ldw	fp,0(sp)
    8af8:	dec00104 	addi	sp,sp,4
    8afc:	f800283a 	ret

00008b00 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8b00:	defffe04 	addi	sp,sp,-8
    8b04:	dfc00115 	stw	ra,4(sp)
    8b08:	df000015 	stw	fp,0(sp)
    8b0c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8b10:	01800074 	movhi	r6,1
    8b14:	31a82604 	addi	r6,r6,-24424
    8b18:	01400074 	movhi	r5,1
    8b1c:	29675f04 	addi	r5,r5,-25220
    8b20:	01000074 	movhi	r4,1
    8b24:	21282604 	addi	r4,r4,-24424
    8b28:	0008a980 	call	8a98 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8b2c:	01800074 	movhi	r6,1
    8b30:	31a08c04 	addi	r6,r6,-32208
    8b34:	01400074 	movhi	r5,1
    8b38:	29600804 	addi	r5,r5,-32736
    8b3c:	01000074 	movhi	r4,1
    8b40:	21200804 	addi	r4,r4,-32736
    8b44:	0008a980 	call	8a98 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8b48:	01800074 	movhi	r6,1
    8b4c:	31a75f04 	addi	r6,r6,-25220
    8b50:	01400074 	movhi	r5,1
    8b54:	29675204 	addi	r5,r5,-25272
    8b58:	01000074 	movhi	r4,1
    8b5c:	21275204 	addi	r4,r4,-25272
    8b60:	0008a980 	call	8a98 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8b64:	0008ff40 	call	8ff4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8b68:	00091e00 	call	91e0 <alt_icache_flush_all>
}
    8b6c:	0001883a 	nop
    8b70:	e037883a 	mov	sp,fp
    8b74:	dfc00117 	ldw	ra,4(sp)
    8b78:	df000017 	ldw	fp,0(sp)
    8b7c:	dec00204 	addi	sp,sp,8
    8b80:	f800283a 	ret

00008b84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b84:	defffd04 	addi	sp,sp,-12
    8b88:	dfc00215 	stw	ra,8(sp)
    8b8c:	df000115 	stw	fp,4(sp)
    8b90:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b94:	0009883a 	mov	r4,zero
    8b98:	0008c340 	call	8c34 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8b9c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8ba0:	0008c6c0 	call	8c6c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8ba4:	01800074 	movhi	r6,1
    8ba8:	31a75204 	addi	r6,r6,-25272
    8bac:	01400074 	movhi	r5,1
    8bb0:	29675204 	addi	r5,r5,-25272
    8bb4:	01000074 	movhi	r4,1
    8bb8:	21275204 	addi	r4,r4,-25272
    8bbc:	00093800 	call	9380 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8bc0:	00091200 	call	9120 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8bc4:	01000074 	movhi	r4,1
    8bc8:	21246004 	addi	r4,r4,-28288
    8bcc:	00099840 	call	9984 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8bd0:	d0a0dd17 	ldw	r2,-31884(gp)
    8bd4:	d0e0de17 	ldw	r3,-31880(gp)
    8bd8:	d120df17 	ldw	r4,-31876(gp)
    8bdc:	200d883a 	mov	r6,r4
    8be0:	180b883a 	mov	r5,r3
    8be4:	1009883a 	mov	r4,r2
    8be8:	00085b00 	call	85b0 <main>
    8bec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8bf0:	01000044 	movi	r4,1
    8bf4:	0008f1c0 	call	8f1c <close>
  exit (result);
    8bf8:	e13fff17 	ldw	r4,-4(fp)
    8bfc:	00099980 	call	9998 <exit>

00008c00 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8c00:	defffd04 	addi	sp,sp,-12
    8c04:	dfc00215 	stw	ra,8(sp)
    8c08:	df000115 	stw	fp,4(sp)
    8c0c:	df000104 	addi	fp,sp,4
    8c10:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8c14:	d1600a04 	addi	r5,gp,-32728
    8c18:	e13fff17 	ldw	r4,-4(fp)
    8c1c:	000907c0 	call	907c <alt_dev_llist_insert>
}
    8c20:	e037883a 	mov	sp,fp
    8c24:	dfc00117 	ldw	ra,4(sp)
    8c28:	df000017 	ldw	fp,0(sp)
    8c2c:	dec00204 	addi	sp,sp,8
    8c30:	f800283a 	ret

00008c34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8c34:	defffd04 	addi	sp,sp,-12
    8c38:	dfc00215 	stw	ra,8(sp)
    8c3c:	df000115 	stw	fp,4(sp)
    8c40:	df000104 	addi	fp,sp,4
    8c44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8c48:	00097040 	call	9704 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8c4c:	00800044 	movi	r2,1
    8c50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8c54:	0001883a 	nop
    8c58:	e037883a 	mov	sp,fp
    8c5c:	dfc00117 	ldw	ra,4(sp)
    8c60:	df000017 	ldw	fp,0(sp)
    8c64:	dec00204 	addi	sp,sp,8
    8c68:	f800283a 	ret

00008c6c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8c6c:	defffe04 	addi	sp,sp,-8
    8c70:	dfc00115 	stw	ra,4(sp)
    8c74:	df000015 	stw	fp,0(sp)
    8c78:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    8c7c:	01000074 	movhi	r4,1
    8c80:	21276904 	addi	r4,r4,-25180
    8c84:	0008c000 	call	8c00 <alt_dev_reg>
}
    8c88:	0001883a 	nop
    8c8c:	e037883a 	mov	sp,fp
    8c90:	dfc00117 	ldw	ra,4(sp)
    8c94:	df000017 	ldw	fp,0(sp)
    8c98:	dec00204 	addi	sp,sp,8
    8c9c:	f800283a 	ret

00008ca0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8ca0:	defffa04 	addi	sp,sp,-24
    8ca4:	dfc00515 	stw	ra,20(sp)
    8ca8:	df000415 	stw	fp,16(sp)
    8cac:	df000404 	addi	fp,sp,16
    8cb0:	e13ffd15 	stw	r4,-12(fp)
    8cb4:	e17ffe15 	stw	r5,-8(fp)
    8cb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8cbc:	e0bffd17 	ldw	r2,-12(fp)
    8cc0:	10800017 	ldw	r2,0(r2)
    8cc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8cc8:	e0bffc17 	ldw	r2,-16(fp)
    8ccc:	10c00a04 	addi	r3,r2,40
    8cd0:	e0bffd17 	ldw	r2,-12(fp)
    8cd4:	10800217 	ldw	r2,8(r2)
    8cd8:	100f883a 	mov	r7,r2
    8cdc:	e1bfff17 	ldw	r6,-4(fp)
    8ce0:	e17ffe17 	ldw	r5,-8(fp)
    8ce4:	1809883a 	mov	r4,r3
    8ce8:	0008d600 	call	8d60 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8cec:	e037883a 	mov	sp,fp
    8cf0:	dfc00117 	ldw	ra,4(sp)
    8cf4:	df000017 	ldw	fp,0(sp)
    8cf8:	dec00204 	addi	sp,sp,8
    8cfc:	f800283a 	ret

00008d00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8d00:	defffa04 	addi	sp,sp,-24
    8d04:	dfc00515 	stw	ra,20(sp)
    8d08:	df000415 	stw	fp,16(sp)
    8d0c:	df000404 	addi	fp,sp,16
    8d10:	e13ffd15 	stw	r4,-12(fp)
    8d14:	e17ffe15 	stw	r5,-8(fp)
    8d18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8d1c:	e0bffd17 	ldw	r2,-12(fp)
    8d20:	10800017 	ldw	r2,0(r2)
    8d24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8d28:	e0bffc17 	ldw	r2,-16(fp)
    8d2c:	10c00a04 	addi	r3,r2,40
    8d30:	e0bffd17 	ldw	r2,-12(fp)
    8d34:	10800217 	ldw	r2,8(r2)
    8d38:	100f883a 	mov	r7,r2
    8d3c:	e1bfff17 	ldw	r6,-4(fp)
    8d40:	e17ffe17 	ldw	r5,-8(fp)
    8d44:	1809883a 	mov	r4,r3
    8d48:	0008e4c0 	call	8e4c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8d4c:	e037883a 	mov	sp,fp
    8d50:	dfc00117 	ldw	ra,4(sp)
    8d54:	df000017 	ldw	fp,0(sp)
    8d58:	dec00204 	addi	sp,sp,8
    8d5c:	f800283a 	ret

00008d60 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8d60:	defff704 	addi	sp,sp,-36
    8d64:	df000815 	stw	fp,32(sp)
    8d68:	df000804 	addi	fp,sp,32
    8d6c:	e13ffc15 	stw	r4,-16(fp)
    8d70:	e17ffd15 	stw	r5,-12(fp)
    8d74:	e1bffe15 	stw	r6,-8(fp)
    8d78:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8d7c:	e0bffc17 	ldw	r2,-16(fp)
    8d80:	10800017 	ldw	r2,0(r2)
    8d84:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    8d88:	e0bffd17 	ldw	r2,-12(fp)
    8d8c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    8d90:	e0bffe17 	ldw	r2,-8(fp)
    8d94:	e0fffd17 	ldw	r3,-12(fp)
    8d98:	1885883a 	add	r2,r3,r2
    8d9c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    8da0:	00001206 	br	8dec <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8da4:	e0bff917 	ldw	r2,-28(fp)
    8da8:	10800037 	ldwio	r2,0(r2)
    8dac:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8db0:	e0bffb17 	ldw	r2,-20(fp)
    8db4:	10a0000c 	andi	r2,r2,32768
    8db8:	10000626 	beq	r2,zero,8dd4 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8dbc:	e0bff817 	ldw	r2,-32(fp)
    8dc0:	10c00044 	addi	r3,r2,1
    8dc4:	e0fff815 	stw	r3,-32(fp)
    8dc8:	e0fffb17 	ldw	r3,-20(fp)
    8dcc:	10c00005 	stb	r3,0(r2)
    8dd0:	00000606 	br	8dec <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    8dd4:	e0fff817 	ldw	r3,-32(fp)
    8dd8:	e0bffd17 	ldw	r2,-12(fp)
    8ddc:	1880071e 	bne	r3,r2,8dfc <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    8de0:	e0bfff17 	ldw	r2,-4(fp)
    8de4:	1090000c 	andi	r2,r2,16384
    8de8:	1000061e 	bne	r2,zero,8e04 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8dec:	e0fff817 	ldw	r3,-32(fp)
    8df0:	e0bffa17 	ldw	r2,-24(fp)
    8df4:	18bfeb36 	bltu	r3,r2,8da4 <_gp+0xffff6d4c>
    8df8:	00000306 	br	8e08 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    8dfc:	0001883a 	nop
    8e00:	00000106 	br	8e08 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    8e04:	0001883a 	nop
    
  }

  if (ptr != buffer)
    8e08:	e0fff817 	ldw	r3,-32(fp)
    8e0c:	e0bffd17 	ldw	r2,-12(fp)
    8e10:	18800426 	beq	r3,r2,8e24 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    8e14:	e0fff817 	ldw	r3,-32(fp)
    8e18:	e0bffd17 	ldw	r2,-12(fp)
    8e1c:	1885c83a 	sub	r2,r3,r2
    8e20:	00000606 	br	8e3c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    8e24:	e0bfff17 	ldw	r2,-4(fp)
    8e28:	1090000c 	andi	r2,r2,16384
    8e2c:	10000226 	beq	r2,zero,8e38 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    8e30:	00bffd44 	movi	r2,-11
    8e34:	00000106 	br	8e3c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    8e38:	00bffec4 	movi	r2,-5
}
    8e3c:	e037883a 	mov	sp,fp
    8e40:	df000017 	ldw	fp,0(sp)
    8e44:	dec00104 	addi	sp,sp,4
    8e48:	f800283a 	ret

00008e4c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8e4c:	defff904 	addi	sp,sp,-28
    8e50:	df000615 	stw	fp,24(sp)
    8e54:	df000604 	addi	fp,sp,24
    8e58:	e13ffc15 	stw	r4,-16(fp)
    8e5c:	e17ffd15 	stw	r5,-12(fp)
    8e60:	e1bffe15 	stw	r6,-8(fp)
    8e64:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8e68:	e0bffc17 	ldw	r2,-16(fp)
    8e6c:	10800017 	ldw	r2,0(r2)
    8e70:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    8e74:	e0bffe17 	ldw	r2,-8(fp)
    8e78:	e0fffd17 	ldw	r3,-12(fp)
    8e7c:	1885883a 	add	r2,r3,r2
    8e80:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    8e84:	00000e06 	br	8ec0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8e88:	e0bffa17 	ldw	r2,-24(fp)
    8e8c:	10800104 	addi	r2,r2,4
    8e90:	10800037 	ldwio	r2,0(r2)
    8e94:	10bfffec 	andhi	r2,r2,65535
    8e98:	10000926 	beq	r2,zero,8ec0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8e9c:	e0fffa17 	ldw	r3,-24(fp)
    8ea0:	e0bffd17 	ldw	r2,-12(fp)
    8ea4:	11000044 	addi	r4,r2,1
    8ea8:	e13ffd15 	stw	r4,-12(fp)
    8eac:	10800003 	ldbu	r2,0(r2)
    8eb0:	10803fcc 	andi	r2,r2,255
    8eb4:	1080201c 	xori	r2,r2,128
    8eb8:	10bfe004 	addi	r2,r2,-128
    8ebc:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8ec0:	e0fffd17 	ldw	r3,-12(fp)
    8ec4:	e0bffb17 	ldw	r2,-20(fp)
    8ec8:	18bfef36 	bltu	r3,r2,8e88 <_gp+0xffff6e30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    8ecc:	e0bffe17 	ldw	r2,-8(fp)
}
    8ed0:	e037883a 	mov	sp,fp
    8ed4:	df000017 	ldw	fp,0(sp)
    8ed8:	dec00104 	addi	sp,sp,4
    8edc:	f800283a 	ret

00008ee0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8ee0:	defffe04 	addi	sp,sp,-8
    8ee4:	dfc00115 	stw	ra,4(sp)
    8ee8:	df000015 	stw	fp,0(sp)
    8eec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8ef0:	d0a00d17 	ldw	r2,-32716(gp)
    8ef4:	10000326 	beq	r2,zero,8f04 <alt_get_errno+0x24>
    8ef8:	d0a00d17 	ldw	r2,-32716(gp)
    8efc:	103ee83a 	callr	r2
    8f00:	00000106 	br	8f08 <alt_get_errno+0x28>
    8f04:	d0a0e104 	addi	r2,gp,-31868
}
    8f08:	e037883a 	mov	sp,fp
    8f0c:	dfc00117 	ldw	ra,4(sp)
    8f10:	df000017 	ldw	fp,0(sp)
    8f14:	dec00204 	addi	sp,sp,8
    8f18:	f800283a 	ret

00008f1c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8f1c:	defffb04 	addi	sp,sp,-20
    8f20:	dfc00415 	stw	ra,16(sp)
    8f24:	df000315 	stw	fp,12(sp)
    8f28:	df000304 	addi	fp,sp,12
    8f2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8f30:	e0bfff17 	ldw	r2,-4(fp)
    8f34:	10000816 	blt	r2,zero,8f58 <close+0x3c>
    8f38:	01400304 	movi	r5,12
    8f3c:	e13fff17 	ldw	r4,-4(fp)
    8f40:	0009cec0 	call	9cec <__mulsi3>
    8f44:	1007883a 	mov	r3,r2
    8f48:	00800074 	movhi	r2,1
    8f4c:	10a77e04 	addi	r2,r2,-25096
    8f50:	1885883a 	add	r2,r3,r2
    8f54:	00000106 	br	8f5c <close+0x40>
    8f58:	0005883a 	mov	r2,zero
    8f5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    8f60:	e0bffd17 	ldw	r2,-12(fp)
    8f64:	10001926 	beq	r2,zero,8fcc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    8f68:	e0bffd17 	ldw	r2,-12(fp)
    8f6c:	10800017 	ldw	r2,0(r2)
    8f70:	10800417 	ldw	r2,16(r2)
    8f74:	10000626 	beq	r2,zero,8f90 <close+0x74>
    8f78:	e0bffd17 	ldw	r2,-12(fp)
    8f7c:	10800017 	ldw	r2,0(r2)
    8f80:	10800417 	ldw	r2,16(r2)
    8f84:	e13ffd17 	ldw	r4,-12(fp)
    8f88:	103ee83a 	callr	r2
    8f8c:	00000106 	br	8f94 <close+0x78>
    8f90:	0005883a 	mov	r2,zero
    8f94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    8f98:	e13fff17 	ldw	r4,-4(fp)
    8f9c:	00096800 	call	9680 <alt_release_fd>
    if (rval < 0)
    8fa0:	e0bffe17 	ldw	r2,-8(fp)
    8fa4:	1000070e 	bge	r2,zero,8fc4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    8fa8:	0008ee00 	call	8ee0 <alt_get_errno>
    8fac:	1007883a 	mov	r3,r2
    8fb0:	e0bffe17 	ldw	r2,-8(fp)
    8fb4:	0085c83a 	sub	r2,zero,r2
    8fb8:	18800015 	stw	r2,0(r3)
      return -1;
    8fbc:	00bfffc4 	movi	r2,-1
    8fc0:	00000706 	br	8fe0 <close+0xc4>
    }
    return 0;
    8fc4:	0005883a 	mov	r2,zero
    8fc8:	00000506 	br	8fe0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8fcc:	0008ee00 	call	8ee0 <alt_get_errno>
    8fd0:	1007883a 	mov	r3,r2
    8fd4:	00801444 	movi	r2,81
    8fd8:	18800015 	stw	r2,0(r3)
    return -1;
    8fdc:	00bfffc4 	movi	r2,-1
  }
}
    8fe0:	e037883a 	mov	sp,fp
    8fe4:	dfc00117 	ldw	ra,4(sp)
    8fe8:	df000017 	ldw	fp,0(sp)
    8fec:	dec00204 	addi	sp,sp,8
    8ff0:	f800283a 	ret

00008ff4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8ff4:	deffff04 	addi	sp,sp,-4
    8ff8:	df000015 	stw	fp,0(sp)
    8ffc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9000:	0001883a 	nop
    9004:	e037883a 	mov	sp,fp
    9008:	df000017 	ldw	fp,0(sp)
    900c:	dec00104 	addi	sp,sp,4
    9010:	f800283a 	ret

00009014 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9014:	defffc04 	addi	sp,sp,-16
    9018:	df000315 	stw	fp,12(sp)
    901c:	df000304 	addi	fp,sp,12
    9020:	e13ffd15 	stw	r4,-12(fp)
    9024:	e17ffe15 	stw	r5,-8(fp)
    9028:	e1bfff15 	stw	r6,-4(fp)
  return len;
    902c:	e0bfff17 	ldw	r2,-4(fp)
}
    9030:	e037883a 	mov	sp,fp
    9034:	df000017 	ldw	fp,0(sp)
    9038:	dec00104 	addi	sp,sp,4
    903c:	f800283a 	ret

00009040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9040:	defffe04 	addi	sp,sp,-8
    9044:	dfc00115 	stw	ra,4(sp)
    9048:	df000015 	stw	fp,0(sp)
    904c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9050:	d0a00d17 	ldw	r2,-32716(gp)
    9054:	10000326 	beq	r2,zero,9064 <alt_get_errno+0x24>
    9058:	d0a00d17 	ldw	r2,-32716(gp)
    905c:	103ee83a 	callr	r2
    9060:	00000106 	br	9068 <alt_get_errno+0x28>
    9064:	d0a0e104 	addi	r2,gp,-31868
}
    9068:	e037883a 	mov	sp,fp
    906c:	dfc00117 	ldw	ra,4(sp)
    9070:	df000017 	ldw	fp,0(sp)
    9074:	dec00204 	addi	sp,sp,8
    9078:	f800283a 	ret

0000907c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    907c:	defffa04 	addi	sp,sp,-24
    9080:	dfc00515 	stw	ra,20(sp)
    9084:	df000415 	stw	fp,16(sp)
    9088:	df000404 	addi	fp,sp,16
    908c:	e13ffe15 	stw	r4,-8(fp)
    9090:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9094:	e0bffe17 	ldw	r2,-8(fp)
    9098:	10000326 	beq	r2,zero,90a8 <alt_dev_llist_insert+0x2c>
    909c:	e0bffe17 	ldw	r2,-8(fp)
    90a0:	10800217 	ldw	r2,8(r2)
    90a4:	1000061e 	bne	r2,zero,90c0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    90a8:	00090400 	call	9040 <alt_get_errno>
    90ac:	1007883a 	mov	r3,r2
    90b0:	00800584 	movi	r2,22
    90b4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    90b8:	00bffa84 	movi	r2,-22
    90bc:	00001306 	br	910c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    90c0:	e0bffe17 	ldw	r2,-8(fp)
    90c4:	e0ffff17 	ldw	r3,-4(fp)
    90c8:	e0fffc15 	stw	r3,-16(fp)
    90cc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    90d0:	e0bffd17 	ldw	r2,-12(fp)
    90d4:	e0fffc17 	ldw	r3,-16(fp)
    90d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    90dc:	e0bffc17 	ldw	r2,-16(fp)
    90e0:	10c00017 	ldw	r3,0(r2)
    90e4:	e0bffd17 	ldw	r2,-12(fp)
    90e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    90ec:	e0bffc17 	ldw	r2,-16(fp)
    90f0:	10800017 	ldw	r2,0(r2)
    90f4:	e0fffd17 	ldw	r3,-12(fp)
    90f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    90fc:	e0bffc17 	ldw	r2,-16(fp)
    9100:	e0fffd17 	ldw	r3,-12(fp)
    9104:	10c00015 	stw	r3,0(r2)

  return 0;  
    9108:	0005883a 	mov	r2,zero
}
    910c:	e037883a 	mov	sp,fp
    9110:	dfc00117 	ldw	ra,4(sp)
    9114:	df000017 	ldw	fp,0(sp)
    9118:	dec00204 	addi	sp,sp,8
    911c:	f800283a 	ret

00009120 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9120:	defffd04 	addi	sp,sp,-12
    9124:	dfc00215 	stw	ra,8(sp)
    9128:	df000115 	stw	fp,4(sp)
    912c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9130:	00800074 	movhi	r2,1
    9134:	10a75104 	addi	r2,r2,-25276
    9138:	e0bfff15 	stw	r2,-4(fp)
    913c:	00000606 	br	9158 <_do_ctors+0x38>
        (*ctor) (); 
    9140:	e0bfff17 	ldw	r2,-4(fp)
    9144:	10800017 	ldw	r2,0(r2)
    9148:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    914c:	e0bfff17 	ldw	r2,-4(fp)
    9150:	10bfff04 	addi	r2,r2,-4
    9154:	e0bfff15 	stw	r2,-4(fp)
    9158:	e0ffff17 	ldw	r3,-4(fp)
    915c:	00800074 	movhi	r2,1
    9160:	10a75204 	addi	r2,r2,-25272
    9164:	18bff62e 	bgeu	r3,r2,9140 <_gp+0xffff70e8>
        (*ctor) (); 
}
    9168:	0001883a 	nop
    916c:	e037883a 	mov	sp,fp
    9170:	dfc00117 	ldw	ra,4(sp)
    9174:	df000017 	ldw	fp,0(sp)
    9178:	dec00204 	addi	sp,sp,8
    917c:	f800283a 	ret

00009180 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9180:	defffd04 	addi	sp,sp,-12
    9184:	dfc00215 	stw	ra,8(sp)
    9188:	df000115 	stw	fp,4(sp)
    918c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9190:	00800074 	movhi	r2,1
    9194:	10a75104 	addi	r2,r2,-25276
    9198:	e0bfff15 	stw	r2,-4(fp)
    919c:	00000606 	br	91b8 <_do_dtors+0x38>
        (*dtor) (); 
    91a0:	e0bfff17 	ldw	r2,-4(fp)
    91a4:	10800017 	ldw	r2,0(r2)
    91a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    91ac:	e0bfff17 	ldw	r2,-4(fp)
    91b0:	10bfff04 	addi	r2,r2,-4
    91b4:	e0bfff15 	stw	r2,-4(fp)
    91b8:	e0ffff17 	ldw	r3,-4(fp)
    91bc:	00800074 	movhi	r2,1
    91c0:	10a75204 	addi	r2,r2,-25272
    91c4:	18bff62e 	bgeu	r3,r2,91a0 <_gp+0xffff7148>
        (*dtor) (); 
}
    91c8:	0001883a 	nop
    91cc:	e037883a 	mov	sp,fp
    91d0:	dfc00117 	ldw	ra,4(sp)
    91d4:	df000017 	ldw	fp,0(sp)
    91d8:	dec00204 	addi	sp,sp,8
    91dc:	f800283a 	ret

000091e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    91e0:	deffff04 	addi	sp,sp,-4
    91e4:	df000015 	stw	fp,0(sp)
    91e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    91ec:	0001883a 	nop
    91f0:	e037883a 	mov	sp,fp
    91f4:	df000017 	ldw	fp,0(sp)
    91f8:	dec00104 	addi	sp,sp,4
    91fc:	f800283a 	ret

00009200 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    9200:	defffe04 	addi	sp,sp,-8
    9204:	df000115 	stw	fp,4(sp)
    9208:	df000104 	addi	fp,sp,4
    920c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    9210:	e0bfff17 	ldw	r2,-4(fp)
    9214:	10bffe84 	addi	r2,r2,-6
    9218:	10c00428 	cmpgeui	r3,r2,16
    921c:	18001a1e 	bne	r3,zero,9288 <alt_exception_cause_generated_bad_addr+0x88>
    9220:	100690ba 	slli	r3,r2,2
    9224:	00800074 	movhi	r2,1
    9228:	10a48e04 	addi	r2,r2,-28104
    922c:	1885883a 	add	r2,r3,r2
    9230:	10800017 	ldw	r2,0(r2)
    9234:	1000683a 	jmp	r2
    9238:	00009278 	rdprs	zero,zero,585
    923c:	00009278 	rdprs	zero,zero,585
    9240:	00009288 	cmpgei	zero,zero,586
    9244:	00009288 	cmpgei	zero,zero,586
    9248:	00009288 	cmpgei	zero,zero,586
    924c:	00009278 	rdprs	zero,zero,585
    9250:	00009280 	call	928 <__alt_mem_onchip_memory2_0-0x76d8>
    9254:	00009288 	cmpgei	zero,zero,586
    9258:	00009278 	rdprs	zero,zero,585
    925c:	00009278 	rdprs	zero,zero,585
    9260:	00009288 	cmpgei	zero,zero,586
    9264:	00009278 	rdprs	zero,zero,585
    9268:	00009280 	call	928 <__alt_mem_onchip_memory2_0-0x76d8>
    926c:	00009288 	cmpgei	zero,zero,586
    9270:	00009288 	cmpgei	zero,zero,586
    9274:	00009278 	rdprs	zero,zero,585
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    9278:	00800044 	movi	r2,1
    927c:	00000306 	br	928c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    9280:	0005883a 	mov	r2,zero
    9284:	00000106 	br	928c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    9288:	0005883a 	mov	r2,zero
  }
}
    928c:	e037883a 	mov	sp,fp
    9290:	df000017 	ldw	fp,0(sp)
    9294:	dec00104 	addi	sp,sp,4
    9298:	f800283a 	ret

0000929c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    929c:	defff804 	addi	sp,sp,-32
    92a0:	dfc00715 	stw	ra,28(sp)
    92a4:	df000615 	stw	fp,24(sp)
    92a8:	dc000515 	stw	r16,20(sp)
    92ac:	df000604 	addi	fp,sp,24
    92b0:	e13ffb15 	stw	r4,-20(fp)
    92b4:	e17ffc15 	stw	r5,-16(fp)
    92b8:	e1bffd15 	stw	r6,-12(fp)
    92bc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    92c0:	e1bffe17 	ldw	r6,-8(fp)
    92c4:	e17ffd17 	ldw	r5,-12(fp)
    92c8:	e13ffc17 	ldw	r4,-16(fp)
    92cc:	00095240 	call	9524 <open>
    92d0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    92d4:	e0bffa17 	ldw	r2,-24(fp)
    92d8:	10002216 	blt	r2,zero,9364 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    92dc:	04000074 	movhi	r16,1
    92e0:	84277e04 	addi	r16,r16,-25096
    92e4:	e0bffa17 	ldw	r2,-24(fp)
    92e8:	01400304 	movi	r5,12
    92ec:	1009883a 	mov	r4,r2
    92f0:	0009cec0 	call	9cec <__mulsi3>
    92f4:	8085883a 	add	r2,r16,r2
    92f8:	10c00017 	ldw	r3,0(r2)
    92fc:	e0bffb17 	ldw	r2,-20(fp)
    9300:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9304:	04000074 	movhi	r16,1
    9308:	84277e04 	addi	r16,r16,-25096
    930c:	e0bffa17 	ldw	r2,-24(fp)
    9310:	01400304 	movi	r5,12
    9314:	1009883a 	mov	r4,r2
    9318:	0009cec0 	call	9cec <__mulsi3>
    931c:	8085883a 	add	r2,r16,r2
    9320:	10800104 	addi	r2,r2,4
    9324:	10c00017 	ldw	r3,0(r2)
    9328:	e0bffb17 	ldw	r2,-20(fp)
    932c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9330:	04000074 	movhi	r16,1
    9334:	84277e04 	addi	r16,r16,-25096
    9338:	e0bffa17 	ldw	r2,-24(fp)
    933c:	01400304 	movi	r5,12
    9340:	1009883a 	mov	r4,r2
    9344:	0009cec0 	call	9cec <__mulsi3>
    9348:	8085883a 	add	r2,r16,r2
    934c:	10800204 	addi	r2,r2,8
    9350:	10c00017 	ldw	r3,0(r2)
    9354:	e0bffb17 	ldw	r2,-20(fp)
    9358:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    935c:	e13ffa17 	ldw	r4,-24(fp)
    9360:	00096800 	call	9680 <alt_release_fd>
  }
} 
    9364:	0001883a 	nop
    9368:	e6ffff04 	addi	sp,fp,-4
    936c:	dfc00217 	ldw	ra,8(sp)
    9370:	df000117 	ldw	fp,4(sp)
    9374:	dc000017 	ldw	r16,0(sp)
    9378:	dec00304 	addi	sp,sp,12
    937c:	f800283a 	ret

00009380 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9380:	defffb04 	addi	sp,sp,-20
    9384:	dfc00415 	stw	ra,16(sp)
    9388:	df000315 	stw	fp,12(sp)
    938c:	df000304 	addi	fp,sp,12
    9390:	e13ffd15 	stw	r4,-12(fp)
    9394:	e17ffe15 	stw	r5,-8(fp)
    9398:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    939c:	01c07fc4 	movi	r7,511
    93a0:	01800044 	movi	r6,1
    93a4:	e17ffd17 	ldw	r5,-12(fp)
    93a8:	01000074 	movhi	r4,1
    93ac:	21278104 	addi	r4,r4,-25084
    93b0:	000929c0 	call	929c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    93b4:	01c07fc4 	movi	r7,511
    93b8:	000d883a 	mov	r6,zero
    93bc:	e17ffe17 	ldw	r5,-8(fp)
    93c0:	01000074 	movhi	r4,1
    93c4:	21277e04 	addi	r4,r4,-25096
    93c8:	000929c0 	call	929c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    93cc:	01c07fc4 	movi	r7,511
    93d0:	01800044 	movi	r6,1
    93d4:	e17fff17 	ldw	r5,-4(fp)
    93d8:	01000074 	movhi	r4,1
    93dc:	21278404 	addi	r4,r4,-25072
    93e0:	000929c0 	call	929c <alt_open_fd>
}  
    93e4:	0001883a 	nop
    93e8:	e037883a 	mov	sp,fp
    93ec:	dfc00117 	ldw	ra,4(sp)
    93f0:	df000017 	ldw	fp,0(sp)
    93f4:	dec00204 	addi	sp,sp,8
    93f8:	f800283a 	ret

000093fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    93fc:	defffe04 	addi	sp,sp,-8
    9400:	dfc00115 	stw	ra,4(sp)
    9404:	df000015 	stw	fp,0(sp)
    9408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    940c:	d0a00d17 	ldw	r2,-32716(gp)
    9410:	10000326 	beq	r2,zero,9420 <alt_get_errno+0x24>
    9414:	d0a00d17 	ldw	r2,-32716(gp)
    9418:	103ee83a 	callr	r2
    941c:	00000106 	br	9424 <alt_get_errno+0x28>
    9420:	d0a0e104 	addi	r2,gp,-31868
}
    9424:	e037883a 	mov	sp,fp
    9428:	dfc00117 	ldw	ra,4(sp)
    942c:	df000017 	ldw	fp,0(sp)
    9430:	dec00204 	addi	sp,sp,8
    9434:	f800283a 	ret

00009438 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9438:	defffb04 	addi	sp,sp,-20
    943c:	dfc00415 	stw	ra,16(sp)
    9440:	df000315 	stw	fp,12(sp)
    9444:	dc000215 	stw	r16,8(sp)
    9448:	df000304 	addi	fp,sp,12
    944c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9450:	e0bffe17 	ldw	r2,-8(fp)
    9454:	10800217 	ldw	r2,8(r2)
    9458:	10d00034 	orhi	r3,r2,16384
    945c:	e0bffe17 	ldw	r2,-8(fp)
    9460:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9464:	e03ffd15 	stw	zero,-12(fp)
    9468:	00002306 	br	94f8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    946c:	04000074 	movhi	r16,1
    9470:	84277e04 	addi	r16,r16,-25096
    9474:	e0bffd17 	ldw	r2,-12(fp)
    9478:	01400304 	movi	r5,12
    947c:	1009883a 	mov	r4,r2
    9480:	0009cec0 	call	9cec <__mulsi3>
    9484:	8085883a 	add	r2,r16,r2
    9488:	10c00017 	ldw	r3,0(r2)
    948c:	e0bffe17 	ldw	r2,-8(fp)
    9490:	10800017 	ldw	r2,0(r2)
    9494:	1880151e 	bne	r3,r2,94ec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9498:	04000074 	movhi	r16,1
    949c:	84277e04 	addi	r16,r16,-25096
    94a0:	e0bffd17 	ldw	r2,-12(fp)
    94a4:	01400304 	movi	r5,12
    94a8:	1009883a 	mov	r4,r2
    94ac:	0009cec0 	call	9cec <__mulsi3>
    94b0:	8085883a 	add	r2,r16,r2
    94b4:	10800204 	addi	r2,r2,8
    94b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    94bc:	10000b0e 	bge	r2,zero,94ec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    94c0:	01400304 	movi	r5,12
    94c4:	e13ffd17 	ldw	r4,-12(fp)
    94c8:	0009cec0 	call	9cec <__mulsi3>
    94cc:	1007883a 	mov	r3,r2
    94d0:	00800074 	movhi	r2,1
    94d4:	10a77e04 	addi	r2,r2,-25096
    94d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    94dc:	e0bffe17 	ldw	r2,-8(fp)
    94e0:	18800226 	beq	r3,r2,94ec <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    94e4:	00bffcc4 	movi	r2,-13
    94e8:	00000806 	br	950c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    94ec:	e0bffd17 	ldw	r2,-12(fp)
    94f0:	10800044 	addi	r2,r2,1
    94f4:	e0bffd15 	stw	r2,-12(fp)
    94f8:	d0a00c17 	ldw	r2,-32720(gp)
    94fc:	1007883a 	mov	r3,r2
    9500:	e0bffd17 	ldw	r2,-12(fp)
    9504:	18bfd92e 	bgeu	r3,r2,946c <_gp+0xffff7414>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9508:	0005883a 	mov	r2,zero
}
    950c:	e6ffff04 	addi	sp,fp,-4
    9510:	dfc00217 	ldw	ra,8(sp)
    9514:	df000117 	ldw	fp,4(sp)
    9518:	dc000017 	ldw	r16,0(sp)
    951c:	dec00304 	addi	sp,sp,12
    9520:	f800283a 	ret

00009524 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9524:	defff604 	addi	sp,sp,-40
    9528:	dfc00915 	stw	ra,36(sp)
    952c:	df000815 	stw	fp,32(sp)
    9530:	df000804 	addi	fp,sp,32
    9534:	e13ffd15 	stw	r4,-12(fp)
    9538:	e17ffe15 	stw	r5,-8(fp)
    953c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9540:	00bfffc4 	movi	r2,-1
    9544:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9548:	00bffb44 	movi	r2,-19
    954c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9550:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9554:	d1600a04 	addi	r5,gp,-32728
    9558:	e13ffd17 	ldw	r4,-12(fp)
    955c:	00097280 	call	9728 <alt_find_dev>
    9560:	e0bff815 	stw	r2,-32(fp)
    9564:	e0bff817 	ldw	r2,-32(fp)
    9568:	1000051e 	bne	r2,zero,9580 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    956c:	e13ffd17 	ldw	r4,-12(fp)
    9570:	00097b80 	call	97b8 <alt_find_file>
    9574:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9578:	00800044 	movi	r2,1
    957c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9580:	e0bff817 	ldw	r2,-32(fp)
    9584:	10002b26 	beq	r2,zero,9634 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9588:	e13ff817 	ldw	r4,-32(fp)
    958c:	00098c00 	call	98c0 <alt_get_fd>
    9590:	e0bff915 	stw	r2,-28(fp)
    9594:	e0bff917 	ldw	r2,-28(fp)
    9598:	1000030e 	bge	r2,zero,95a8 <open+0x84>
    {
      status = index;
    959c:	e0bff917 	ldw	r2,-28(fp)
    95a0:	e0bffa15 	stw	r2,-24(fp)
    95a4:	00002506 	br	963c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    95a8:	01400304 	movi	r5,12
    95ac:	e13ff917 	ldw	r4,-28(fp)
    95b0:	0009cec0 	call	9cec <__mulsi3>
    95b4:	1007883a 	mov	r3,r2
    95b8:	00800074 	movhi	r2,1
    95bc:	10a77e04 	addi	r2,r2,-25096
    95c0:	1885883a 	add	r2,r3,r2
    95c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    95c8:	e0fffe17 	ldw	r3,-8(fp)
    95cc:	00900034 	movhi	r2,16384
    95d0:	10bfffc4 	addi	r2,r2,-1
    95d4:	1886703a 	and	r3,r3,r2
    95d8:	e0bffc17 	ldw	r2,-16(fp)
    95dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    95e0:	e0bffb17 	ldw	r2,-20(fp)
    95e4:	1000051e 	bne	r2,zero,95fc <open+0xd8>
    95e8:	e13ffc17 	ldw	r4,-16(fp)
    95ec:	00094380 	call	9438 <alt_file_locked>
    95f0:	e0bffa15 	stw	r2,-24(fp)
    95f4:	e0bffa17 	ldw	r2,-24(fp)
    95f8:	10001016 	blt	r2,zero,963c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    95fc:	e0bff817 	ldw	r2,-32(fp)
    9600:	10800317 	ldw	r2,12(r2)
    9604:	10000826 	beq	r2,zero,9628 <open+0x104>
    9608:	e0bff817 	ldw	r2,-32(fp)
    960c:	10800317 	ldw	r2,12(r2)
    9610:	e1ffff17 	ldw	r7,-4(fp)
    9614:	e1bffe17 	ldw	r6,-8(fp)
    9618:	e17ffd17 	ldw	r5,-12(fp)
    961c:	e13ffc17 	ldw	r4,-16(fp)
    9620:	103ee83a 	callr	r2
    9624:	00000106 	br	962c <open+0x108>
    9628:	0005883a 	mov	r2,zero
    962c:	e0bffa15 	stw	r2,-24(fp)
    9630:	00000206 	br	963c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9634:	00bffb44 	movi	r2,-19
    9638:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    963c:	e0bffa17 	ldw	r2,-24(fp)
    9640:	1000090e 	bge	r2,zero,9668 <open+0x144>
  {
    alt_release_fd (index);  
    9644:	e13ff917 	ldw	r4,-28(fp)
    9648:	00096800 	call	9680 <alt_release_fd>
    ALT_ERRNO = -status;
    964c:	00093fc0 	call	93fc <alt_get_errno>
    9650:	1007883a 	mov	r3,r2
    9654:	e0bffa17 	ldw	r2,-24(fp)
    9658:	0085c83a 	sub	r2,zero,r2
    965c:	18800015 	stw	r2,0(r3)
    return -1;
    9660:	00bfffc4 	movi	r2,-1
    9664:	00000106 	br	966c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    9668:	e0bff917 	ldw	r2,-28(fp)
}
    966c:	e037883a 	mov	sp,fp
    9670:	dfc00117 	ldw	ra,4(sp)
    9674:	df000017 	ldw	fp,0(sp)
    9678:	dec00204 	addi	sp,sp,8
    967c:	f800283a 	ret

00009680 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9680:	defffc04 	addi	sp,sp,-16
    9684:	dfc00315 	stw	ra,12(sp)
    9688:	df000215 	stw	fp,8(sp)
    968c:	dc000115 	stw	r16,4(sp)
    9690:	df000204 	addi	fp,sp,8
    9694:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9698:	e0bffe17 	ldw	r2,-8(fp)
    969c:	108000d0 	cmplti	r2,r2,3
    96a0:	1000111e 	bne	r2,zero,96e8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    96a4:	04000074 	movhi	r16,1
    96a8:	84277e04 	addi	r16,r16,-25096
    96ac:	e0bffe17 	ldw	r2,-8(fp)
    96b0:	01400304 	movi	r5,12
    96b4:	1009883a 	mov	r4,r2
    96b8:	0009cec0 	call	9cec <__mulsi3>
    96bc:	8085883a 	add	r2,r16,r2
    96c0:	10800204 	addi	r2,r2,8
    96c4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    96c8:	04000074 	movhi	r16,1
    96cc:	84277e04 	addi	r16,r16,-25096
    96d0:	e0bffe17 	ldw	r2,-8(fp)
    96d4:	01400304 	movi	r5,12
    96d8:	1009883a 	mov	r4,r2
    96dc:	0009cec0 	call	9cec <__mulsi3>
    96e0:	8085883a 	add	r2,r16,r2
    96e4:	10000015 	stw	zero,0(r2)
  }
}
    96e8:	0001883a 	nop
    96ec:	e6ffff04 	addi	sp,fp,-4
    96f0:	dfc00217 	ldw	ra,8(sp)
    96f4:	df000117 	ldw	fp,4(sp)
    96f8:	dc000017 	ldw	r16,0(sp)
    96fc:	dec00304 	addi	sp,sp,12
    9700:	f800283a 	ret

00009704 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9704:	deffff04 	addi	sp,sp,-4
    9708:	df000015 	stw	fp,0(sp)
    970c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9710:	000170fa 	wrctl	ienable,zero
}
    9714:	0001883a 	nop
    9718:	e037883a 	mov	sp,fp
    971c:	df000017 	ldw	fp,0(sp)
    9720:	dec00104 	addi	sp,sp,4
    9724:	f800283a 	ret

00009728 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9728:	defffa04 	addi	sp,sp,-24
    972c:	dfc00515 	stw	ra,20(sp)
    9730:	df000415 	stw	fp,16(sp)
    9734:	df000404 	addi	fp,sp,16
    9738:	e13ffe15 	stw	r4,-8(fp)
    973c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9740:	e0bfff17 	ldw	r2,-4(fp)
    9744:	10800017 	ldw	r2,0(r2)
    9748:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    974c:	e13ffe17 	ldw	r4,-8(fp)
    9750:	00099e80 	call	99e8 <strlen>
    9754:	10800044 	addi	r2,r2,1
    9758:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    975c:	00000d06 	br	9794 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9760:	e0bffc17 	ldw	r2,-16(fp)
    9764:	10800217 	ldw	r2,8(r2)
    9768:	e0fffd17 	ldw	r3,-12(fp)
    976c:	180d883a 	mov	r6,r3
    9770:	e17ffe17 	ldw	r5,-8(fp)
    9774:	1009883a 	mov	r4,r2
    9778:	00099b80 	call	99b8 <memcmp>
    977c:	1000021e 	bne	r2,zero,9788 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9780:	e0bffc17 	ldw	r2,-16(fp)
    9784:	00000706 	br	97a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9788:	e0bffc17 	ldw	r2,-16(fp)
    978c:	10800017 	ldw	r2,0(r2)
    9790:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9794:	e0fffc17 	ldw	r3,-16(fp)
    9798:	e0bfff17 	ldw	r2,-4(fp)
    979c:	18bff01e 	bne	r3,r2,9760 <_gp+0xffff7708>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    97a0:	0005883a 	mov	r2,zero
}
    97a4:	e037883a 	mov	sp,fp
    97a8:	dfc00117 	ldw	ra,4(sp)
    97ac:	df000017 	ldw	fp,0(sp)
    97b0:	dec00204 	addi	sp,sp,8
    97b4:	f800283a 	ret

000097b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    97b8:	defffb04 	addi	sp,sp,-20
    97bc:	dfc00415 	stw	ra,16(sp)
    97c0:	df000315 	stw	fp,12(sp)
    97c4:	df000304 	addi	fp,sp,12
    97c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    97cc:	d0a00817 	ldw	r2,-32736(gp)
    97d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    97d4:	00003106 	br	989c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    97d8:	e0bffd17 	ldw	r2,-12(fp)
    97dc:	10800217 	ldw	r2,8(r2)
    97e0:	1009883a 	mov	r4,r2
    97e4:	00099e80 	call	99e8 <strlen>
    97e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    97ec:	e0bffd17 	ldw	r2,-12(fp)
    97f0:	10c00217 	ldw	r3,8(r2)
    97f4:	e0bffe17 	ldw	r2,-8(fp)
    97f8:	10bfffc4 	addi	r2,r2,-1
    97fc:	1885883a 	add	r2,r3,r2
    9800:	10800003 	ldbu	r2,0(r2)
    9804:	10803fcc 	andi	r2,r2,255
    9808:	1080201c 	xori	r2,r2,128
    980c:	10bfe004 	addi	r2,r2,-128
    9810:	10800bd8 	cmpnei	r2,r2,47
    9814:	1000031e 	bne	r2,zero,9824 <alt_find_file+0x6c>
    {
      len -= 1;
    9818:	e0bffe17 	ldw	r2,-8(fp)
    981c:	10bfffc4 	addi	r2,r2,-1
    9820:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9824:	e0bffe17 	ldw	r2,-8(fp)
    9828:	e0ffff17 	ldw	r3,-4(fp)
    982c:	1885883a 	add	r2,r3,r2
    9830:	10800003 	ldbu	r2,0(r2)
    9834:	10803fcc 	andi	r2,r2,255
    9838:	1080201c 	xori	r2,r2,128
    983c:	10bfe004 	addi	r2,r2,-128
    9840:	10800be0 	cmpeqi	r2,r2,47
    9844:	1000081e 	bne	r2,zero,9868 <alt_find_file+0xb0>
    9848:	e0bffe17 	ldw	r2,-8(fp)
    984c:	e0ffff17 	ldw	r3,-4(fp)
    9850:	1885883a 	add	r2,r3,r2
    9854:	10800003 	ldbu	r2,0(r2)
    9858:	10803fcc 	andi	r2,r2,255
    985c:	1080201c 	xori	r2,r2,128
    9860:	10bfe004 	addi	r2,r2,-128
    9864:	10000a1e 	bne	r2,zero,9890 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    9868:	e0bffd17 	ldw	r2,-12(fp)
    986c:	10800217 	ldw	r2,8(r2)
    9870:	e0fffe17 	ldw	r3,-8(fp)
    9874:	180d883a 	mov	r6,r3
    9878:	e17fff17 	ldw	r5,-4(fp)
    987c:	1009883a 	mov	r4,r2
    9880:	00099b80 	call	99b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9884:	1000021e 	bne	r2,zero,9890 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9888:	e0bffd17 	ldw	r2,-12(fp)
    988c:	00000706 	br	98ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    9890:	e0bffd17 	ldw	r2,-12(fp)
    9894:	10800017 	ldw	r2,0(r2)
    9898:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    989c:	e0fffd17 	ldw	r3,-12(fp)
    98a0:	d0a00804 	addi	r2,gp,-32736
    98a4:	18bfcc1e 	bne	r3,r2,97d8 <_gp+0xffff7780>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    98a8:	0005883a 	mov	r2,zero
}
    98ac:	e037883a 	mov	sp,fp
    98b0:	dfc00117 	ldw	ra,4(sp)
    98b4:	df000017 	ldw	fp,0(sp)
    98b8:	dec00204 	addi	sp,sp,8
    98bc:	f800283a 	ret

000098c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    98c0:	defffa04 	addi	sp,sp,-24
    98c4:	dfc00515 	stw	ra,20(sp)
    98c8:	df000415 	stw	fp,16(sp)
    98cc:	dc000315 	stw	r16,12(sp)
    98d0:	df000404 	addi	fp,sp,16
    98d4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    98d8:	00bffa04 	movi	r2,-24
    98dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    98e0:	e03ffc15 	stw	zero,-16(fp)
    98e4:	00001d06 	br	995c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    98e8:	04000074 	movhi	r16,1
    98ec:	84277e04 	addi	r16,r16,-25096
    98f0:	e0bffc17 	ldw	r2,-16(fp)
    98f4:	01400304 	movi	r5,12
    98f8:	1009883a 	mov	r4,r2
    98fc:	0009cec0 	call	9cec <__mulsi3>
    9900:	8085883a 	add	r2,r16,r2
    9904:	10800017 	ldw	r2,0(r2)
    9908:	1000111e 	bne	r2,zero,9950 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    990c:	04000074 	movhi	r16,1
    9910:	84277e04 	addi	r16,r16,-25096
    9914:	e0bffc17 	ldw	r2,-16(fp)
    9918:	01400304 	movi	r5,12
    991c:	1009883a 	mov	r4,r2
    9920:	0009cec0 	call	9cec <__mulsi3>
    9924:	8085883a 	add	r2,r16,r2
    9928:	e0fffe17 	ldw	r3,-8(fp)
    992c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9930:	d0e00c17 	ldw	r3,-32720(gp)
    9934:	e0bffc17 	ldw	r2,-16(fp)
    9938:	1880020e 	bge	r3,r2,9944 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    993c:	e0bffc17 	ldw	r2,-16(fp)
    9940:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
    9944:	e0bffc17 	ldw	r2,-16(fp)
    9948:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    994c:	00000606 	br	9968 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9950:	e0bffc17 	ldw	r2,-16(fp)
    9954:	10800044 	addi	r2,r2,1
    9958:	e0bffc15 	stw	r2,-16(fp)
    995c:	e0bffc17 	ldw	r2,-16(fp)
    9960:	10800810 	cmplti	r2,r2,32
    9964:	103fe01e 	bne	r2,zero,98e8 <_gp+0xffff7890>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9968:	e0bffd17 	ldw	r2,-12(fp)
}
    996c:	e6ffff04 	addi	sp,fp,-4
    9970:	dfc00217 	ldw	ra,8(sp)
    9974:	df000117 	ldw	fp,4(sp)
    9978:	dc000017 	ldw	r16,0(sp)
    997c:	dec00304 	addi	sp,sp,12
    9980:	f800283a 	ret

00009984 <atexit>:
    9984:	200b883a 	mov	r5,r4
    9988:	000f883a 	mov	r7,zero
    998c:	000d883a 	mov	r6,zero
    9990:	0009883a 	mov	r4,zero
    9994:	0009a041 	jmpi	9a04 <__register_exitproc>

00009998 <exit>:
    9998:	defffe04 	addi	sp,sp,-8
    999c:	000b883a 	mov	r5,zero
    99a0:	dc000015 	stw	r16,0(sp)
    99a4:	dfc00115 	stw	ra,4(sp)
    99a8:	2021883a 	mov	r16,r4
    99ac:	0009b5c0 	call	9b5c <__call_exitprocs>
    99b0:	8009883a 	mov	r4,r16
    99b4:	0009d140 	call	9d14 <_exit>

000099b8 <memcmp>:
    99b8:	218d883a 	add	r6,r4,r6
    99bc:	21800826 	beq	r4,r6,99e0 <memcmp+0x28>
    99c0:	20800003 	ldbu	r2,0(r4)
    99c4:	28c00003 	ldbu	r3,0(r5)
    99c8:	10c00226 	beq	r2,r3,99d4 <memcmp+0x1c>
    99cc:	10c5c83a 	sub	r2,r2,r3
    99d0:	f800283a 	ret
    99d4:	21000044 	addi	r4,r4,1
    99d8:	29400044 	addi	r5,r5,1
    99dc:	003ff706 	br	99bc <_gp+0xffff7964>
    99e0:	0005883a 	mov	r2,zero
    99e4:	f800283a 	ret

000099e8 <strlen>:
    99e8:	2005883a 	mov	r2,r4
    99ec:	10c00007 	ldb	r3,0(r2)
    99f0:	18000226 	beq	r3,zero,99fc <strlen+0x14>
    99f4:	10800044 	addi	r2,r2,1
    99f8:	003ffc06 	br	99ec <_gp+0xffff7994>
    99fc:	1105c83a 	sub	r2,r2,r4
    9a00:	f800283a 	ret

00009a04 <__register_exitproc>:
    9a04:	00800074 	movhi	r2,1
    9a08:	10a82404 	addi	r2,r2,-24432
    9a0c:	10c00017 	ldw	r3,0(r2)
    9a10:	defff904 	addi	sp,sp,-28
    9a14:	dc000015 	stw	r16,0(sp)
    9a18:	1c000c17 	ldw	r16,48(r3)
    9a1c:	dd400515 	stw	r21,20(sp)
    9a20:	dd000415 	stw	r20,16(sp)
    9a24:	dcc00315 	stw	r19,12(sp)
    9a28:	dc800215 	stw	r18,8(sp)
    9a2c:	dc400115 	stw	r17,4(sp)
    9a30:	dfc00615 	stw	ra,24(sp)
    9a34:	202b883a 	mov	r21,r4
    9a38:	2823883a 	mov	r17,r5
    9a3c:	3027883a 	mov	r19,r6
    9a40:	3825883a 	mov	r18,r7
    9a44:	1029883a 	mov	r20,r2
    9a48:	8000021e 	bne	r16,zero,9a54 <__register_exitproc+0x50>
    9a4c:	1c000d04 	addi	r16,r3,52
    9a50:	1c000c15 	stw	r16,48(r3)
    9a54:	80800117 	ldw	r2,4(r16)
    9a58:	00c007c4 	movi	r3,31
    9a5c:	1880110e 	bge	r3,r2,9aa4 <__register_exitproc+0xa0>
    9a60:	00800034 	movhi	r2,0
    9a64:	10800004 	addi	r2,r2,0
    9a68:	1000021e 	bne	r2,zero,9a74 <__register_exitproc+0x70>
    9a6c:	00bfffc4 	movi	r2,-1
    9a70:	00003106 	br	9b38 <__register_exitproc+0x134>
    9a74:	01002304 	movi	r4,140
    9a78:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9a7c:	1021883a 	mov	r16,r2
    9a80:	103ffa26 	beq	r2,zero,9a6c <_gp+0xffff7a14>
    9a84:	10000115 	stw	zero,4(r2)
    9a88:	a0800017 	ldw	r2,0(r20)
    9a8c:	10c00c17 	ldw	r3,48(r2)
    9a90:	80c00015 	stw	r3,0(r16)
    9a94:	14000c15 	stw	r16,48(r2)
    9a98:	80002215 	stw	zero,136(r16)
    9a9c:	a8001d26 	beq	r21,zero,9b14 <__register_exitproc+0x110>
    9aa0:	00000606 	br	9abc <__register_exitproc+0xb8>
    9aa4:	a8001b26 	beq	r21,zero,9b14 <__register_exitproc+0x110>
    9aa8:	80802217 	ldw	r2,136(r16)
    9aac:	1000091e 	bne	r2,zero,9ad4 <__register_exitproc+0xd0>
    9ab0:	00800034 	movhi	r2,0
    9ab4:	10800004 	addi	r2,r2,0
    9ab8:	103fec26 	beq	r2,zero,9a6c <_gp+0xffff7a14>
    9abc:	01004204 	movi	r4,264
    9ac0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9ac4:	103fe926 	beq	r2,zero,9a6c <_gp+0xffff7a14>
    9ac8:	10004015 	stw	zero,256(r2)
    9acc:	10004115 	stw	zero,260(r2)
    9ad0:	80802215 	stw	r2,136(r16)
    9ad4:	81400117 	ldw	r5,4(r16)
    9ad8:	01000044 	movi	r4,1
    9adc:	2947883a 	add	r3,r5,r5
    9ae0:	18c7883a 	add	r3,r3,r3
    9ae4:	10c7883a 	add	r3,r2,r3
    9ae8:	1cc00015 	stw	r19,0(r3)
    9aec:	2148983a 	sll	r4,r4,r5
    9af0:	11404017 	ldw	r5,256(r2)
    9af4:	290ab03a 	or	r5,r5,r4
    9af8:	11404015 	stw	r5,256(r2)
    9afc:	1c802015 	stw	r18,128(r3)
    9b00:	00c00084 	movi	r3,2
    9b04:	a8c0031e 	bne	r21,r3,9b14 <__register_exitproc+0x110>
    9b08:	10c04117 	ldw	r3,260(r2)
    9b0c:	1908b03a 	or	r4,r3,r4
    9b10:	11004115 	stw	r4,260(r2)
    9b14:	80800117 	ldw	r2,4(r16)
    9b18:	10c00044 	addi	r3,r2,1
    9b1c:	10800084 	addi	r2,r2,2
    9b20:	1085883a 	add	r2,r2,r2
    9b24:	1085883a 	add	r2,r2,r2
    9b28:	80c00115 	stw	r3,4(r16)
    9b2c:	80a1883a 	add	r16,r16,r2
    9b30:	84400015 	stw	r17,0(r16)
    9b34:	0005883a 	mov	r2,zero
    9b38:	dfc00617 	ldw	ra,24(sp)
    9b3c:	dd400517 	ldw	r21,20(sp)
    9b40:	dd000417 	ldw	r20,16(sp)
    9b44:	dcc00317 	ldw	r19,12(sp)
    9b48:	dc800217 	ldw	r18,8(sp)
    9b4c:	dc400117 	ldw	r17,4(sp)
    9b50:	dc000017 	ldw	r16,0(sp)
    9b54:	dec00704 	addi	sp,sp,28
    9b58:	f800283a 	ret

00009b5c <__call_exitprocs>:
    9b5c:	defff504 	addi	sp,sp,-44
    9b60:	dd000515 	stw	r20,20(sp)
    9b64:	05000074 	movhi	r20,1
    9b68:	dc800315 	stw	r18,12(sp)
    9b6c:	dfc00a15 	stw	ra,40(sp)
    9b70:	df000915 	stw	fp,36(sp)
    9b74:	ddc00815 	stw	r23,32(sp)
    9b78:	dd800715 	stw	r22,28(sp)
    9b7c:	dd400615 	stw	r21,24(sp)
    9b80:	dcc00415 	stw	r19,16(sp)
    9b84:	dc400215 	stw	r17,8(sp)
    9b88:	dc000115 	stw	r16,4(sp)
    9b8c:	d9000015 	stw	r4,0(sp)
    9b90:	2825883a 	mov	r18,r5
    9b94:	a5282404 	addi	r20,r20,-24432
    9b98:	a4400017 	ldw	r17,0(r20)
    9b9c:	8cc00c17 	ldw	r19,48(r17)
    9ba0:	8c400c04 	addi	r17,r17,48
    9ba4:	98004526 	beq	r19,zero,9cbc <__call_exitprocs+0x160>
    9ba8:	9c000117 	ldw	r16,4(r19)
    9bac:	00900034 	movhi	r2,16384
    9bb0:	10bfffc4 	addi	r2,r2,-1
    9bb4:	9d402217 	ldw	r21,136(r19)
    9bb8:	85bfffc4 	addi	r22,r16,-1
    9bbc:	80a1883a 	add	r16,r16,r2
    9bc0:	8421883a 	add	r16,r16,r16
    9bc4:	8421883a 	add	r16,r16,r16
    9bc8:	ac2f883a 	add	r23,r21,r16
    9bcc:	84000204 	addi	r16,r16,8
    9bd0:	9c21883a 	add	r16,r19,r16
    9bd4:	b0002716 	blt	r22,zero,9c74 <__call_exitprocs+0x118>
    9bd8:	90000726 	beq	r18,zero,9bf8 <__call_exitprocs+0x9c>
    9bdc:	a800041e 	bne	r21,zero,9bf0 <__call_exitprocs+0x94>
    9be0:	b5bfffc4 	addi	r22,r22,-1
    9be4:	bdffff04 	addi	r23,r23,-4
    9be8:	843fff04 	addi	r16,r16,-4
    9bec:	003ff906 	br	9bd4 <_gp+0xffff7b7c>
    9bf0:	b9002017 	ldw	r4,128(r23)
    9bf4:	913ffa1e 	bne	r18,r4,9be0 <_gp+0xffff7b88>
    9bf8:	99000117 	ldw	r4,4(r19)
    9bfc:	82000017 	ldw	r8,0(r16)
    9c00:	213fffc4 	addi	r4,r4,-1
    9c04:	b100021e 	bne	r22,r4,9c10 <__call_exitprocs+0xb4>
    9c08:	9d800115 	stw	r22,4(r19)
    9c0c:	00000106 	br	9c14 <__call_exitprocs+0xb8>
    9c10:	80000015 	stw	zero,0(r16)
    9c14:	403ff226 	beq	r8,zero,9be0 <_gp+0xffff7b88>
    9c18:	9f000117 	ldw	fp,4(r19)
    9c1c:	a8000526 	beq	r21,zero,9c34 <__call_exitprocs+0xd8>
    9c20:	00800044 	movi	r2,1
    9c24:	1592983a 	sll	r9,r2,r22
    9c28:	a9404017 	ldw	r5,256(r21)
    9c2c:	494a703a 	and	r5,r9,r5
    9c30:	2800021e 	bne	r5,zero,9c3c <__call_exitprocs+0xe0>
    9c34:	403ee83a 	callr	r8
    9c38:	00000906 	br	9c60 <__call_exitprocs+0x104>
    9c3c:	a9004117 	ldw	r4,260(r21)
    9c40:	4908703a 	and	r4,r9,r4
    9c44:	2000041e 	bne	r4,zero,9c58 <__call_exitprocs+0xfc>
    9c48:	b9400017 	ldw	r5,0(r23)
    9c4c:	d9000017 	ldw	r4,0(sp)
    9c50:	403ee83a 	callr	r8
    9c54:	00000206 	br	9c60 <__call_exitprocs+0x104>
    9c58:	b9000017 	ldw	r4,0(r23)
    9c5c:	403ee83a 	callr	r8
    9c60:	99000117 	ldw	r4,4(r19)
    9c64:	e13fcc1e 	bne	fp,r4,9b98 <_gp+0xffff7b40>
    9c68:	89000017 	ldw	r4,0(r17)
    9c6c:	993fdc26 	beq	r19,r4,9be0 <_gp+0xffff7b88>
    9c70:	003fc906 	br	9b98 <_gp+0xffff7b40>
    9c74:	00800034 	movhi	r2,0
    9c78:	10800004 	addi	r2,r2,0
    9c7c:	10000f26 	beq	r2,zero,9cbc <__call_exitprocs+0x160>
    9c80:	99400117 	ldw	r5,4(r19)
    9c84:	99000017 	ldw	r4,0(r19)
    9c88:	2800091e 	bne	r5,zero,9cb0 <__call_exitprocs+0x154>
    9c8c:	20000826 	beq	r4,zero,9cb0 <__call_exitprocs+0x154>
    9c90:	89000015 	stw	r4,0(r17)
    9c94:	a8000226 	beq	r21,zero,9ca0 <__call_exitprocs+0x144>
    9c98:	a809883a 	mov	r4,r21
    9c9c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9ca0:	9809883a 	mov	r4,r19
    9ca4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    9ca8:	8cc00017 	ldw	r19,0(r17)
    9cac:	003fbd06 	br	9ba4 <_gp+0xffff7b4c>
    9cb0:	9823883a 	mov	r17,r19
    9cb4:	2027883a 	mov	r19,r4
    9cb8:	003fba06 	br	9ba4 <_gp+0xffff7b4c>
    9cbc:	dfc00a17 	ldw	ra,40(sp)
    9cc0:	df000917 	ldw	fp,36(sp)
    9cc4:	ddc00817 	ldw	r23,32(sp)
    9cc8:	dd800717 	ldw	r22,28(sp)
    9ccc:	dd400617 	ldw	r21,24(sp)
    9cd0:	dd000517 	ldw	r20,20(sp)
    9cd4:	dcc00417 	ldw	r19,16(sp)
    9cd8:	dc800317 	ldw	r18,12(sp)
    9cdc:	dc400217 	ldw	r17,8(sp)
    9ce0:	dc000117 	ldw	r16,4(sp)
    9ce4:	dec00b04 	addi	sp,sp,44
    9ce8:	f800283a 	ret

00009cec <__mulsi3>:
    9cec:	0005883a 	mov	r2,zero
    9cf0:	20000726 	beq	r4,zero,9d10 <__mulsi3+0x24>
    9cf4:	20c0004c 	andi	r3,r4,1
    9cf8:	2008d07a 	srli	r4,r4,1
    9cfc:	18000126 	beq	r3,zero,9d04 <__mulsi3+0x18>
    9d00:	1145883a 	add	r2,r2,r5
    9d04:	294b883a 	add	r5,r5,r5
    9d08:	203ffa1e 	bne	r4,zero,9cf4 <_gp+0xffff7c9c>
    9d0c:	f800283a 	ret
    9d10:	f800283a 	ret

00009d14 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9d14:	defffd04 	addi	sp,sp,-12
    9d18:	df000215 	stw	fp,8(sp)
    9d1c:	df000204 	addi	fp,sp,8
    9d20:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    9d24:	0001883a 	nop
    9d28:	e0bfff17 	ldw	r2,-4(fp)
    9d2c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    9d30:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9d34:	10000226 	beq	r2,zero,9d40 <_exit+0x2c>
    ALT_SIM_FAIL();
    9d38:	002af070 	cmpltui	zero,zero,43969
    9d3c:	00000106 	br	9d44 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    9d40:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9d44:	003fff06 	br	9d44 <_gp+0xffff7cec>
